{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import AnalyzePageTableData from \"../../../../public/JsonAnalyze/AnalyzePageTableData.json\";\nimport AustriaData from \"../../../../public/JsonAnalyze/AustriaData.json\";\nimport CountryData from \"../../../../public/JsonAnalyze/CountryData\";\nimport Global from \"../views/Globel/Global\";\nimport { createJsonData } from \"./optionData\";\n\n//判断AustriaData和CountryData中的哪些数据集被选中了,同时添加生态文明表格的属性值\nexport const JudgeSelectJson = (JsonName, AttributeJson) => {\n  let AustriaJson = AustriaData.austria.features;\n  for (let i = 0; i < AustriaJson.length; i++) {\n    let status = true;\n    if (JsonName == AustriaJson[i].properties.name) {\n      createJsonData(\"Table\", AttributeJson, AustriaJson[i].properties);\n      //去除重复列\n      if (Global.VisualJson.length == 0) {\n        Global.VisualJson.push(AustriaJson[i]);\n      } else {\n        for (let j = 0; j < Global.VisualJson.length; j++) {\n          if (JsonName == Global.VisualJson[j].properties.name) {\n            status = false;\n            break;\n          }\n        }\n        if (status) {\n          Global.VisualJson.push(AustriaJson[i]);\n        }\n      }\n    }\n  }\n  let CountryJson = CountryData.world.features;\n  for (let i = 0; i < CountryJson.length; i++) {\n    if (JsonName == CountryJson[i].properties.name) {\n      //要判断一下是否在Global中存在\n      let status = true;\n      createJsonData(\"Table\", AttributeJson, CountryJson[i].properties);\n      Global.VisualJson.push(CountryJson[i]);\n      if (Global.VisualJson.length == 0) {\n        Global.VisualJson.push(CountryData[i]);\n      } else {\n        for (let j = 0; j < Global.VisualJson.length; j++) {\n          if (JsonName == Global.VisualJson[j].properties.name) {\n            status = false;\n            break;\n          }\n        }\n        if (status) {\n          Global.VisualJson.push(CountryData[i]);\n        }\n      }\n    }\n  }\n};\n\n//得到有值的Result数据\nexport const GetResultJson = () => {\n  let List1 = JSON.stringify(Global.ResultJson, [\"Target\", \"TargetData\"]);\n  List1 = List1.replace(new RegExp(\"Target\", \"g\"), \"Name\");\n  List1 = List1.replace(new RegExp(\"TargetData\", \"g\"), \"Data\");\n  List1 = JSON.parse(List1);\n  let List2 = JSON.stringify(Global.ResultJson, [\"Factor\", \"FactorData\"]);\n  List2 = List2.replace(new RegExp(\"Factor\", \"g\"), \"Name\");\n  List2 = List2.replace(new RegExp(\"FactorData\", \"g\"), \"Data\");\n  List2 = JSON.parse(List2);\n  let List12 = List1.concat(List2);\n  let List3 = JSON.stringify(Global.ResultJson, [\"FactorLayer\", \"FactorLayerData\"]);\n  List3 = List3.replace(new RegExp(\"FactorLayer\", \"g\"), \"Name\");\n  List3 = List3.replace(new RegExp(\"FactorLayerData\", \"g\"), \"Data\");\n  List3 = JSON.parse(List3);\n  let List13 = List12.concat(List3);\n  //去除重复列\n  var temp = {}; //存放id\n  var result = []; //新数组\n  List13.map(item => {\n    if (!temp[item[\"Name\"]]) {\n      result.push(item);\n      temp[item[\"Name\"]] = true;\n    }\n  });\n  // console.log(result);\n  return result;\n};","map":{"version":3,"names":["AustriaData","CountryData","Global","createJsonData","JudgeSelectJson","JsonName","AttributeJson","AustriaJson","austria","features","i","length","status","properties","name","VisualJson","push","j","CountryJson","world","GetResultJson","List1","JSON","stringify","ResultJson","replace","RegExp","parse","List2","List12","concat","List3","List13","temp","result","map","item"],"sources":["E:/Working/IP_proj/EcociviSystem/ecosys/src/views/EvaluateAnalyze/js/getData.js"],"sourcesContent":["// import AnalyzePageTableData from \"../../../../public/JsonAnalyze/AnalyzePageTableData.json\";\r\nimport AustriaData from \"../../../../public/JsonAnalyze/AustriaData.json\";\r\nimport CountryData from \"../../../../public/JsonAnalyze/CountryData\";\r\nimport Global from \"../views/Globel/Global\";\r\nimport { createJsonData } from \"./optionData\";\r\n\r\n//判断AustriaData和CountryData中的哪些数据集被选中了,同时添加生态文明表格的属性值\r\nexport const JudgeSelectJson = (JsonName, AttributeJson) => {\r\n  let AustriaJson = AustriaData.austria.features;\r\n  for (let i = 0; i < AustriaJson.length; i++) {\r\n    let status = true;\r\n    if (JsonName == AustriaJson[i].properties.name) {\r\n      createJsonData(\"Table\", AttributeJson, AustriaJson[i].properties);\r\n      //去除重复列\r\n      if (Global.VisualJson.length == 0) {\r\n        Global.VisualJson.push(AustriaJson[i]);\r\n      } else {\r\n        for (let j = 0; j < Global.VisualJson.length; j++) {\r\n          if (JsonName == Global.VisualJson[j].properties.name) {\r\n            status = false;\r\n            break;\r\n          }\r\n        }\r\n        if (status) {\r\n          Global.VisualJson.push(AustriaJson[i]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  let CountryJson = CountryData.world.features;\r\n  for (let i = 0; i < CountryJson.length; i++) {\r\n    if (JsonName == CountryJson[i].properties.name) {\r\n      //要判断一下是否在Global中存在\r\n      let status = true;\r\n      createJsonData(\"Table\", AttributeJson, CountryJson[i].properties);\r\n      Global.VisualJson.push(CountryJson[i]);\r\n      if (Global.VisualJson.length == 0) {\r\n        Global.VisualJson.push(CountryData[i]);\r\n      } else {\r\n        for (let j = 0; j < Global.VisualJson.length; j++) {\r\n          if (JsonName == Global.VisualJson[j].properties.name) {\r\n            status = false;\r\n            break;\r\n          }\r\n        }\r\n        if (status) {\r\n          Global.VisualJson.push(CountryData[i]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n//得到有值的Result数据\r\nexport const GetResultJson = () => {\r\n  let List1 = JSON.stringify(Global.ResultJson, [\"Target\", \"TargetData\"]);\r\n  List1 = List1.replace(new RegExp(\"Target\", \"g\"), \"Name\");\r\n  List1 = List1.replace(new RegExp(\"TargetData\", \"g\"), \"Data\");\r\n  List1 = JSON.parse(List1);\r\n  let List2 = JSON.stringify(Global.ResultJson, [\"Factor\", \"FactorData\"]);\r\n  List2 = List2.replace(new RegExp(\"Factor\", \"g\"), \"Name\");\r\n  List2 = List2.replace(new RegExp(\"FactorData\", \"g\"), \"Data\");\r\n  List2 = JSON.parse(List2);\r\n  let List12 = List1.concat(List2);\r\n  let List3 = JSON.stringify(Global.ResultJson, [\r\n    \"FactorLayer\",\r\n    \"FactorLayerData\",\r\n  ]);\r\n  List3 = List3.replace(new RegExp(\"FactorLayer\", \"g\"), \"Name\");\r\n  List3 = List3.replace(new RegExp(\"FactorLayerData\", \"g\"), \"Data\");\r\n  List3 = JSON.parse(List3);\r\n  let List13 = List12.concat(List3);\r\n  //去除重复列\r\n  var temp = {}; //存放id\r\n  var result = []; //新数组\r\n  List13.map((item) => {\r\n    if (!temp[item[\"Name\"]]) {\r\n      result.push(item);\r\n      temp[item[\"Name\"]] = true;\r\n    }\r\n  });\r\n  // console.log(result);\r\n  return result;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}