{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n//为一条数据添加属性键和属性值\nexport const createJsonData = (prop, val, OneJsonData) => {\n  if (typeof val == \"undefined\") {\n    delete OneJsonData[prop];\n  } else {\n    OneJsonData[prop] = val;\n  }\n};\n\n//为json对象数组添加数据\nexport const AddJsonData = (FirstTarget, SecondTarget, ThirdTarget, Dataset) => {\n  var OneJsonData = {\n    \"Target\": \"生态文明指数\"\n  };\n  createJsonData(\"Index\", FirstTarget, OneJsonData);\n  createJsonData(\"Factor\", SecondTarget, OneJsonData);\n  createJsonData(\"FactorLayer\", ThirdTarget, OneJsonData);\n  Dataset.push(OneJsonData);\n  console.log(Dataset);\n};\n\n//为数据集删除最后一列数据\nexport const DeleteJsonDate = Dataset => {\n  Dataset.splice(Dataset.length - 1, 1);\n};\n\n//为Json数据集的其中一条数据添加属性键和属性值\nexport const createJsonDataOfDatatset = (prop, val, Dataset, index) => {\n  createJsonData(prop, val, Dataset[index]);\n};\n\n//计算每个权重和数据指标值\nexport const CalculateData = Dataset => {\n  //第一遍循环先计算因子层的数据\n  var TempIndex = 0;\n  var DataSum = Number(Dataset[0].FactorLayerData) * Number(Dataset[0].FactorLayerWeight);\n  var WeightSum = Number(Dataset[0].FactorLayerWeight);\n  var Result;\n  for (var i = 0; i < Dataset.length; i++) {\n    if (Object.prototype.hasOwnProperty.call(Dataset[i], 'FactorWeight')) {\n      if (i != 0) {\n        Result = DataSum / WeightSum;\n        createJsonDataOfDatatset(\"FactorData\", Result, Dataset, TempIndex);\n        DataSum = Number(Dataset[i].FactorLayerData) * Number(Dataset[i].FactorLayerWeight);\n        WeightSum = Number(Dataset[i].FactorLayerWeight);\n      }\n      TempIndex = i;\n    } else {\n      DataSum = DataSum + Number(Dataset[i].FactorLayerData) * Number(Dataset[i].FactorLayerWeight);\n      WeightSum = Number(WeightSum) + Number(Dataset[i].FactorLayerWeight);\n    }\n  }\n  Result = DataSum / WeightSum;\n  createJsonDataOfDatatset(\"FactorData\", Result, Dataset, TempIndex);\n  //第二遍循环计算指标层的数据\n  TempIndex = 0;\n  DataSum = Number(Dataset[0].FactorData) * Number(Dataset[0].FactorWeight);\n  WeightSum = Number(Dataset[0].FactorWeight);\n  for (i = 0; i < Dataset.length; i++) {\n    if (Object.prototype.hasOwnProperty.call(Dataset[i], 'IndexWeight')) {\n      if (i != 0) {\n        Result = DataSum / WeightSum;\n        createJsonDataOfDatatset(\"IndexData\", Result, Dataset, TempIndex);\n        DataSum = Number(Dataset[i].FactorData) * Number(Dataset[i].FactorWeight);\n        WeightSum = Number(Dataset[0].FactorWeight);\n      }\n      TempIndex = i;\n    } else {\n      if (Object.prototype.hasOwnProperty.call(Dataset[i], 'FactorData')) {\n        DataSum = DataSum + Number(Dataset[i].FactorData) * Number(Dataset[i].FactorWeight);\n        WeightSum = Number(WeightSum) + Number(Dataset[i].FactorWeight);\n      }\n    }\n  }\n  Result = DataSum / WeightSum;\n  createJsonDataOfDatatset(\"IndexData\", Result, Dataset, TempIndex);\n  //最后一遍循环目标层数据\n  TempIndex = 0;\n  DataSum = Number(Dataset[0].IndexData) * Number(Dataset[0].IndexWeight);\n  WeightSum = Number(Dataset[0].IndexWeight);\n  for (i = 0; i < Dataset.length; i++) {\n    if (Object.prototype.hasOwnProperty.call(Dataset[i], 'IndexData')) {\n      DataSum = DataSum + Number(Dataset[i].IndexData) * Number(Dataset[i].IndexWeight);\n      WeightSum = WeightSum + Number(Dataset[i].IndexWeight);\n    }\n  }\n  Result = DataSum / WeightSum;\n  createJsonDataOfDatatset(\"TargetData\", Result, Dataset, TempIndex);\n};\n\n//最后结果的展示\nexport const ShowResult = (Dataset, ListColumn1, ListColumn2) => {\n  let ResultList = JSON.stringify(Dataset, [ListColumn1, ListColumn2]);\n  ResultList = JSON.parse(ResultList);\n  return ResultList;\n};\n\n//计算空间自相关指数\n//首先是判断两个区域是否相邻\nexport const judgeNearby = (Dataset, i, j) => {\n  let state = 0;\n  for (let n = 0; n < Dataset[i].geometry.coordinates[0].length; n++) {\n    for (let m = 0; m < Dataset[j].geometry.coordinates[0].length; m++) {\n      if (Dataset[i].geometry.coordinates[0][n].toString() == Dataset[j].geometry.coordinates[0][m].toString()) {\n        state = 1;\n        break;\n      }\n    }\n  }\n  console.log(state);\n  return state;\n};\nexport const ReturnAttribute = (feature, indexName) => {\n  let Data = 0;\n  for (let i = 0; i < feature.properties.Table.length; i++) {\n    if (feature.properties.Table[i].Name == indexName) {\n      Data = feature.properties.Table[i].NameData;\n    }\n  }\n  return Data;\n};\n\n//计算所选择指标的区域均值\nexport const globalAverage = (Dataset, IndexName) => {\n  let AverageData = 0;\n  for (let i = 0; i < Dataset.length; i++) {\n    AverageData = AverageData + ReturnAttribute(Dataset[i], IndexName);\n  }\n  AverageData = AverageData / Dataset.length;\n  return AverageData;\n};\n\n//计算局部莫兰指数\nexport const CalculateMoran = (feature, Dataset, IndexName) => {\n  let LocalMoran = 0;\n  let k;\n  let S_2 = 0;\n  let y_average = globalAverage(Dataset, IndexName);\n  let y_feature = ReturnAttribute(feature, IndexName);\n  let result;\n  //找到是序号\n  for (let i = 0; i < Dataset.length; i++) {\n    if (Dataset[i].properties.name == feature.properties.name) {\n      k = i;\n      break;\n    }\n  }\n  for (let i = 0; i < Dataset.length; i++) {\n    S_2 = S_2 + (ReturnAttribute(Dataset[i], IndexName) - y_average) * (ReturnAttribute(Dataset[i], IndexName) - y_average);\n    if (i == k) {\n      continue;\n    }\n    LocalMoran = LocalMoran + judgeNearby(Dataset, k, i) * (ReturnAttribute(Dataset[i], IndexName) - y_average);\n  }\n  S_2 = S_2 / Dataset.length;\n  console.log(\"S2为\" + S_2);\n  let Z = y_feature - y_average;\n  result = \"<br/>莫兰指数：\" + Z * LocalMoran / S_2 + \"<br/>Z:\" + Z + \"<br/>Q:\" + LocalMoran;\n  return result;\n};","map":{"version":3,"names":["createJsonData","prop","val","OneJsonData","AddJsonData","FirstTarget","SecondTarget","ThirdTarget","Dataset","push","console","log","DeleteJsonDate","splice","length","createJsonDataOfDatatset","index","CalculateData","TempIndex","DataSum","Number","FactorLayerData","FactorLayerWeight","WeightSum","Result","i","Object","prototype","hasOwnProperty","call","FactorData","FactorWeight","IndexData","IndexWeight","ShowResult","ListColumn1","ListColumn2","ResultList","JSON","stringify","parse","judgeNearby","j","state","n","geometry","coordinates","m","toString","ReturnAttribute","feature","indexName","Data","properties","Table","Name","NameData","globalAverage","IndexName","AverageData","CalculateMoran","LocalMoran","k","S_2","y_average","y_feature","result","name","Z"],"sources":["E:/Working/IP_proj/EcosystemCivi/ecosys/js/optionData.js"],"sourcesContent":["\r\n//为一条数据添加属性键和属性值\r\nexport const createJsonData=(prop, val, OneJsonData)=>{\r\n    if(typeof val==\"undefined\"){\r\n        delete OneJsonData[prop];\r\n    }else {\r\n        OneJsonData[prop]=val;\r\n    }\r\n}\r\n\r\n//为json对象数组添加数据\r\nexport const AddJsonData=(FirstTarget,SecondTarget,ThirdTarget,Dataset)=>\r\n{\r\n    var OneJsonData={\"Target\":\"生态文明指数\"};\r\n    createJsonData(\"Index\",FirstTarget,OneJsonData);\r\n    createJsonData(\"Factor\",SecondTarget,OneJsonData);\r\n    createJsonData(\"FactorLayer\",ThirdTarget,OneJsonData);\r\n    Dataset.push(OneJsonData);\r\n    console.log(Dataset);\r\n}\r\n\r\n//为数据集删除最后一列数据\r\nexport const DeleteJsonDate=(Dataset)=>\r\n{\r\n    Dataset.splice(Dataset.length-1,1);\r\n}\r\n\r\n//为Json数据集的其中一条数据添加属性键和属性值\r\nexport const createJsonDataOfDatatset=(prop,val,Dataset,index)=>{\r\n    createJsonData(prop,val,Dataset[index]);\r\n\r\n}\r\n\r\n//计算每个权重和数据指标值\r\nexport const CalculateData=(Dataset)=>\r\n{\r\n    //第一遍循环先计算因子层的数据\r\n    var TempIndex=0;\r\n    var DataSum=Number(Dataset[0].FactorLayerData)*Number(Dataset[0].FactorLayerWeight);\r\n    var WeightSum=Number(Dataset[0].FactorLayerWeight);\r\n    var Result;\r\n    for(var i=0;i<Dataset.length;i++){\r\n        if(Object.prototype.hasOwnProperty.call(Dataset[i],'FactorWeight')){\r\n             if(i!=0){\r\n                 Result=DataSum/WeightSum;\r\n                 createJsonDataOfDatatset(\"FactorData\",Result,Dataset,TempIndex);\r\n                 DataSum=Number(Dataset[i].FactorLayerData)*Number(Dataset[i].FactorLayerWeight);\r\n                 WeightSum=Number(Dataset[i].FactorLayerWeight);\r\n             }\r\n            TempIndex=i;\r\n        }else{\r\n            DataSum=DataSum+Number(Dataset[i].FactorLayerData)*Number(Dataset[i].FactorLayerWeight);\r\n            WeightSum=Number(WeightSum)+Number(Dataset[i].FactorLayerWeight);\r\n        }\r\n    }\r\n    Result=DataSum/WeightSum;\r\n    createJsonDataOfDatatset(\"FactorData\",Result,Dataset,TempIndex);\r\n    //第二遍循环计算指标层的数据\r\n    TempIndex=0;\r\n    DataSum=Number(Dataset[0].FactorData)*Number(Dataset[0].FactorWeight);\r\n    WeightSum=Number(Dataset[0].FactorWeight);\r\n    for (i=0;i<Dataset.length;i++){\r\n        if(Object.prototype.hasOwnProperty.call(Dataset[i],'IndexWeight')) {\r\n            if (i != 0) {\r\n                Result = DataSum / WeightSum;\r\n                createJsonDataOfDatatset(\"IndexData\", Result, Dataset, TempIndex);\r\n                DataSum = Number(Dataset[i].FactorData)*Number(Dataset[i].FactorWeight);\r\n                WeightSum=Number(Dataset[0].FactorWeight);\r\n            }\r\n            TempIndex=i;\r\n        }else{\r\n            if(Object.prototype.hasOwnProperty.call(Dataset[i],'FactorData')){\r\n                DataSum=DataSum+Number(Dataset[i].FactorData)*Number(Dataset[i].FactorWeight);\r\n                WeightSum=Number(WeightSum)+Number(Dataset[i].FactorWeight);\r\n            }\r\n        }\r\n    }\r\n    Result=DataSum/WeightSum;\r\n    createJsonDataOfDatatset(\"IndexData\",Result,Dataset,TempIndex);\r\n    //最后一遍循环目标层数据\r\n    TempIndex=0;\r\n    DataSum=Number(Dataset[0].IndexData)*Number(Dataset[0].IndexWeight);\r\n    WeightSum=Number(Dataset[0].IndexWeight);\r\n    for(i=0;i<Dataset.length;i++){\r\n        if(Object.prototype.hasOwnProperty.call(Dataset[i],'IndexData')){\r\n            DataSum=DataSum+Number(Dataset[i].IndexData)*Number(Dataset[i].IndexWeight);\r\n            WeightSum=WeightSum+Number(Dataset[i].IndexWeight);\r\n        }\r\n    }\r\n    Result=DataSum/WeightSum;\r\n    createJsonDataOfDatatset(\"TargetData\",Result,Dataset,TempIndex);\r\n\r\n}\r\n\r\n//最后结果的展示\r\nexport const ShowResult=(Dataset,ListColumn1,ListColumn2)=>\r\n{\r\n    let ResultList=JSON.stringify(Dataset,[ListColumn1,ListColumn2]);\r\n    ResultList=JSON.parse(ResultList);\r\n    return ResultList;\r\n}\r\n\r\n\r\n//计算空间自相关指数\r\n//首先是判断两个区域是否相邻\r\nexport const judgeNearby=(Dataset,i,j)=>{\r\n    let state=0;\r\n    for(let n=0;n<Dataset[i].geometry.coordinates[0].length;n++){\r\n        for(let m=0;m<Dataset[j].geometry.coordinates[0].length;m++){\r\n            if(Dataset[i].geometry.coordinates[0][n].toString()==Dataset[j].geometry.coordinates[0][m].toString()){\r\n                state=1;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    console.log(state);\r\n    return state;\r\n}\r\n\r\nexport const ReturnAttribute=(feature,indexName)=>{\r\n    let Data=0;\r\n    for (let i=0;i<feature.properties.Table.length;i++){\r\n        if(feature.properties.Table[i].Name==indexName){\r\n            Data=feature.properties.Table[i].NameData;\r\n        }\r\n    }\r\n    return Data;\r\n}\r\n\r\n//计算所选择指标的区域均值\r\nexport const globalAverage=(Dataset,IndexName)=>{\r\n    let AverageData=0;\r\n    for(let i=0;i<Dataset.length;i++){\r\n        AverageData=AverageData+ReturnAttribute(Dataset[i],IndexName);\r\n    }\r\n    AverageData=AverageData/Dataset.length;\r\n    return AverageData;\r\n}\r\n\r\n//计算局部莫兰指数\r\nexport const CalculateMoran=(feature,Dataset,IndexName)=>{\r\n    let LocalMoran=0;\r\n    let k;\r\n    let S_2=0;\r\n    let y_average=globalAverage(Dataset,IndexName);\r\n    let y_feature=ReturnAttribute(feature,IndexName);\r\n    let result;\r\n    //找到是序号\r\n    for(let i=0;i<Dataset.length;i++){\r\n        if(Dataset[i].properties.name==feature.properties.name){\r\n            k=i;\r\n            break;\r\n        }\r\n    }\r\n    for(let i=0;i<Dataset.length;i++){\r\n        S_2=S_2+(ReturnAttribute(Dataset[i],IndexName)-y_average)*(ReturnAttribute(Dataset[i],IndexName)-y_average);\r\n        if(i==k){\r\n\r\n            continue;\r\n        }\r\n        LocalMoran=LocalMoran+judgeNearby(Dataset,k,i)*(ReturnAttribute(Dataset[i],IndexName)-y_average);\r\n    }\r\n    S_2=S_2/Dataset.length;\r\n    console.log(\"S2为\"+S_2)\r\n    let Z=(y_feature-y_average);\r\n    result=\"<br/>莫兰指数：\"+Z*LocalMoran/S_2+\"<br/>Z:\"+Z+\"<br/>Q:\"+LocalMoran\r\n    return result;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}