{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { AnalyzeMap } from \"../js/AnalyzeMap\";\nimport { SplitJson } from \"@/views/EvaluateAnalyze/js/getData\";\nimport { AddJsonData, DeleteJsonDate, createJsonDataOfDatatset, CalculateData } from \"../js/optionData\";\nexport default {\n  name: \"SystemPage2\",\n  data() {\n    return {\n      //这是在现有体系页面所需要的数据\n      SDGsIndex: [{\n        Target: \"生态文明指数\",\n        Index: \"资源承载\",\n        Factor: \"土地资源承载力\",\n        FactorLayer: \"地形起伏度\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"资源承载\",\n        Factor: \"土地资源承载力\",\n        FactorLayer: \"耕地面积占比\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"资源承载\",\n        Factor: \"土地资源承载力\",\n        FactorLayer: \"土地利用程度\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"资源承载\",\n        Factor: \"水资源丰度\",\n        FactorLayer: \"水资源可用量\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"资源承载\",\n        Factor: \"自然环境危害性\",\n        FactorLayer: \"气象灾害\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"资源承载\",\n        Factor: \"自然环境危害性\",\n        FactorLayer: \"地质灾害\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"环境压力\",\n        Factor: \"环境污染\",\n        FactorLayer: \"大气环境污染\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"环境压力\",\n        Factor: \"环境污染\",\n        FactorLayer: \"水环境污染\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"环境压力\",\n        Factor: \"环境污染\",\n        FactorLayer: \"土壤环境污染\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"环境压力\",\n        Factor: \"环境保护\",\n        FactorLayer: \"森林覆盖率\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"环境压力\",\n        Factor: \"环境保护\",\n        FactorLayer: \"生物丰富度\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"环境压力\",\n        Factor: \"环境保护\",\n        FactorLayer: \"自然保护区面积\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"环境压力\",\n        Factor: \"环境保护\",\n        FactorLayer: \"自然保护区面积\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"生态资产\",\n        Factor: \"自然资源价值\",\n        FactorLayer: \"有机质生产价值\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"生态资产\",\n        Factor: \"自然资源价值\",\n        FactorLayer: \"生态经济产品价值\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"生态资产\",\n        Factor: \"生态系统服务价值\",\n        FactorLayer: \"固碳释氧价值\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"生态资产\",\n        Factor: \"生态系统服务价值\",\n        FactorLayer: \"涵养水源价值\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"生态资产\",\n        Factor: \"生态系统服务价值\",\n        FactorLayer: \"净化空气价值\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"生态资产\",\n        Factor: \"生态系统服务价值\",\n        FactorLayer: \"营养物质循环价值\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"生态资产\",\n        Factor: \"生态系统服务价值\",\n        FactorLayer: \"土壤保持价值\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"生态资产\",\n        Factor: \"生态系统服务价值\",\n        FactorLayer: \"生物多样性\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"发展能力\",\n        Factor: \"经济活力\",\n        FactorLayer: \"净化空气价值\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"发展能力\",\n        Factor: \"经济活力\",\n        FactorLayer: \"经济规模水平\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"发展能力\",\n        Factor: \"经济活力\",\n        FactorLayer: \"产业结构水平\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"发展能力\",\n        Factor: \"经济活力\",\n        FactorLayer: \"财政及社会保障\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"发展能力\",\n        Factor: \"经济活力\",\n        FactorLayer: \"居民生活与消费\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"发展能力\",\n        Factor: \"经济活力\",\n        FactorLayer: \"科技教育水平\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"发展能力\",\n        Factor: \"基础设施\",\n        FactorLayer: \"关键交通节点可达性\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"发展能力\",\n        Factor: \"社会服务\",\n        FactorLayer: \"公共服务设施便捷度\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"零碳排放\",\n        Factor: \"碳排放\",\n        FactorLayer: \"能源消耗碳排放\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"零碳排放\",\n        Factor: \"碳排放\",\n        FactorLayer: \"工业生产过程碳排放\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"零碳排放\",\n        Factor: \"碳排放\",\n        FactorLayer: \"农业活动碳排放\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"零碳排放\",\n        Factor: \"碳排放\",\n        FactorLayer: \"生活项目碳排放\"\n      }, {\n        Target: \"生态文明指数\",\n        Index: \"零碳排放\",\n        Factor: \"碳吸收\",\n        FactorLayer: \"生态系统碳吸收量\"\n      }],\n      currentYear: new Date().getFullYear(),\n      //载入体系页面需要的数据\n      needMergeArr: [\"Target\", \"Index\", \"Factor\"],\n      rowMergeArrs: {},\n      rowCustomMergeArrs: {},\n      tabClickIndex: null,\n      // 点击的单元格\n      tabClickLabel: \"\",\n      // 当前点击的列名\n\n      //这是在自定义页面所需要的数据\n      ListOne: [],\n      OneReturn: \"\",\n      ListTwo: [],\n      TwoReturn: \"\",\n      ListThree: [],\n      ThreeReturn: \"\",\n      //返回的JSON数据表格\n      CustomDataTables: [],\n      //自适应浏览器高度\n      tableHeight: \"\",\n      tableHeight2: \"\",\n      //设置权重页面所需要的Json数据\n      WeightDataTable: \"\",\n      //设置权重页面输入框所需要的数据\n      WeightDataIndex: \"\",\n      WeightInput: \"\",\n      DataInput: \"\",\n      //最后结果数据\n      ResultDataTable: \"\"\n    };\n  },\n  methods: {\n    mapInit() {\n      this.mapObj = new AnalyzeMap(\"data-show-map\");\n      this.mapObj.AddGeoJson();\n    },\n    // 合拼单元格方法\n    arraySpanMethod({\n      column,\n      rowIndex\n    }) {\n      // 把需要循环的列名加入\n      if (column.property === \"Target\") return this.mergeAction(\"Target\", rowIndex);\n      if (column.property === \"Index\") return this.mergeAction(\"Index\", rowIndex);\n      if (column.property === \"Factor\") return this.mergeAction(\"Factor\", rowIndex);\n    },\n    mergeAction(val, rowIndex) {\n      let _row = this.rowMergeArrs[val].rowArr[rowIndex];\n      let _col = _row > 0 ? 1 : 0;\n      return [_row, _col];\n    },\n    //自定义界面表格合拼\n    arraySpanMethod2({\n      column,\n      rowIndex\n    }) {\n      // 把需要循环的列名加入\n      if (column.property === \"Target\") return this.mergeAction2(\"Target\", rowIndex);\n      if (column.property === \"Index\") return this.mergeAction2(\"Index\", rowIndex);\n      if (column.property === \"Factor\") return this.mergeAction2(\"Factor\", rowIndex);\n    },\n    mergeAction2(val, rowIndex) {\n      let _row = this.rowCustomMergeArrs[val].rowArr[rowIndex];\n      let _col = _row > 0 ? 1 : 0;\n      return [_row, _col];\n    },\n    rowMergeHandle(arr, data) {\n      if (!Array.isArray(arr) && !arr.length) return false;\n      if (!Array.isArray(data) && !data.length) return false;\n      let needMerge = {};\n      arr.forEach(i => {\n        needMerge[i] = {\n          rowArr: [],\n          rowMergeNum: 0\n        };\n        data.forEach((item, index) => {\n          if (index === 0) {\n            needMerge[i].rowArr.push(1);\n            needMerge[i].rowMergeNum = 0;\n          } else {\n            if (item[i] === data[index - 1][i]) {\n              needMerge[i].rowArr[needMerge[i].rowMergeNum] += 1;\n              needMerge[i].rowArr.push(0);\n            } else {\n              needMerge[i].rowArr.push(1);\n              needMerge[i].rowMergeNum = index;\n            }\n          }\n        });\n      });\n      return needMerge;\n    },\n    //现有体系页面单元格点击事件\n    TableCell({\n      row,\n      rowIndex\n    }) {\n      row.index = rowIndex;\n    },\n    cellClick(row, column) {\n      switch (column.label) {\n        case \"目标层\":\n          this.tabClickIndex = row.index;\n          this.tabClickLabel = column.label;\n          break;\n        case \"指标层\":\n          this.tabClickIndex = row.index;\n          this.tabClickLabel = column.label;\n          break;\n        case \"因子层\":\n          this.tabClickIndex = row.index;\n          this.tabClickLabel = column.label;\n          break;\n        case \"因子\":\n          this.tabClickIndex = row.index;\n          this.tabClickLabel = column.label;\n          break;\n        default:\n          return;\n      }\n    },\n    //失去焦点初始化\n    inputBlur() {\n      this.tabClickIndex = null;\n      this.tabClickLabel = \"\";\n    },\n    //载入体系页面点击事件\n    ButtonClick() {},\n    //自定义页面点击事件,把数据传到表格里\n    ButtonClick1() {\n      AddJsonData(this.OneReturn, this.TwoReturn, this.ThreeReturn, this.CustomDataTables);\n      //挂载自定义体系表格合拼\n      this.rowCustomMergeArrs = this.rowMergeHandle(this.needMergeArr, this.CustomDataTables);\n    },\n    deleteClick1() {\n      DeleteJsonDate(this.CustomDataTables);\n    },\n    //自定义页面表格点击事件，导出数据\n    ButtonClick2() {\n      this.WeightDataTable = this.CustomDataTables;\n    },\n    deleteClick2() {},\n    //权重设置页面单元格点击事件\n    WeightCellClick(row) {\n      //点击自定义单元格把第几列数据传入\n      this.WeightDataIndex = row.index;\n    },\n    //权重设置页面通过点击确定为其设置权重和数据\n    WeightDataClick1() {\n      createJsonDataOfDatatset(\"IndexWeight\", this.WeightInput, this.WeightDataTable, this.WeightDataIndex);\n    },\n    WeightDataClick2() {\n      createJsonDataOfDatatset(\"FactorWeight\", this.WeightInput, this.WeightDataTable, this.WeightDataIndex);\n    },\n    WeightDataClick3() {\n      createJsonDataOfDatatset(\"FactorLayerWeight\", this.WeightInput, this.WeightDataTable, this.WeightDataIndex);\n      createJsonDataOfDatatset(\"FactorLayerData\", this.DataInput, this.WeightDataTable, this.WeightDataIndex);\n    },\n    //权重设置页面进行计算\n    CalculateClick() {\n      CalculateData(this.WeightDataTable);\n      this.ResultDataTable = this.WeightDataTable;\n    }\n  },\n  //挂载前加载地图\n  mounted() {\n    this.$nextTick(() => {\n      // 根据浏览器高度设置初始高度\n      this.tableHeight = window.innerHeight - 300;\n      this.tableHeight2 = window.innerHeight - 570;\n      // 监听浏览器高度变化，改变表格高度\n      window.onresize = () => {\n        this.tableHeight = window.innerHeight - 300;\n        this.tableHeight2 = window.innerHeight - 570;\n      };\n    });\n    this.rowMergeArrs = this.rowMergeHandle(this.needMergeArr, this.SDGsIndex);\n    this.mapInit();\n    this.ListOne = SplitJson(\"维度\", \"目标\", \"领域\", \"一级指标\", \"一级目标\");\n    this.ListTwo = SplitJson(\"具体目标\", \"具体目标\", \"指数\", \"二级指标\", \"二级指数\");\n    this.ListThree = SplitJson(\"评价指标\", \"具体指标\", \"指标\", \"评价因子\", \"评价因子\");\n  },\n  //之后销毁地图\n  beforeDestroy() {\n    this.mapObj && this.mapObj.destroy();\n  }\n};","map":{"version":3,"names":["AnalyzeMap","SplitJson","AddJsonData","DeleteJsonDate","createJsonDataOfDatatset","CalculateData","name","data","SDGsIndex","Target","Index","Factor","FactorLayer","currentYear","Date","getFullYear","needMergeArr","rowMergeArrs","rowCustomMergeArrs","tabClickIndex","tabClickLabel","ListOne","OneReturn","ListTwo","TwoReturn","ListThree","ThreeReturn","CustomDataTables","tableHeight","tableHeight2","WeightDataTable","WeightDataIndex","WeightInput","DataInput","ResultDataTable","methods","mapInit","mapObj","AddGeoJson","arraySpanMethod","column","rowIndex","property","mergeAction","val","_row","rowArr","_col","arraySpanMethod2","mergeAction2","rowMergeHandle","arr","Array","isArray","length","needMerge","forEach","i","rowMergeNum","item","index","push","TableCell","row","cellClick","label","inputBlur","ButtonClick","ButtonClick1","deleteClick1","ButtonClick2","deleteClick2","WeightCellClick","WeightDataClick1","WeightDataClick2","WeightDataClick3","CalculateClick","mounted","$nextTick","window","innerHeight","onresize","beforeDestroy","destroy"],"sources":["src/views/EvaluateAnalyze/views/SystemPage2.vue"],"sourcesContent":["<template>\r\n  <el-container class=\"data-show\">\r\n    <el-header>\r\n      <el-menu\r\n        :default-active=\"activeIndex\"\r\n        class=\"data-show-header\"\r\n        mode=\"horizontal\"\r\n        background-color=\"#001529\"\r\n      >\r\n        <el-row>\r\n          <el-col :span=\"2\" :offset=\"1\">\r\n            <a\r\n              class=\"header-logo\"\r\n              href=\"/EcociviAnalyze\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              <div></div>\r\n            </a>\r\n          </el-col>\r\n\r\n          <el-col :span=\"6\" :offset=\"1\">\r\n            <h1 class=\"data-show-header-banner\">生态文明评估分析系统</h1>\r\n          </el-col>\r\n        </el-row>\r\n      </el-menu>\r\n    </el-header>\r\n    <el-main class=\"data-show-main\">\r\n      <el-row class=\"data-show-content\">\r\n        <el-col :span=\"6\" :offset=\"1\">\r\n          <div class=\"data-show-sider\" style=\"height: 100%; width: 100%\">\r\n            <el-tabs style=\"height: 100%; width: 100%\">\r\n              <el-tab-pane label=\"现有指标体系\">\r\n                <el-table\r\n                  class=\"tableStyle data-show-table\"\r\n                  :data=\"SDGsIndex\"\r\n                  :row-class-name=\"TableCell\"\r\n                  :span-method=\"arraySpanMethod\"\r\n                  border\r\n                  :max-height=\"tableHeight\"\r\n                  @cell-click=\"cellClick\"\r\n                >\r\n                  <el-table-column prop=\"Target\" label=\"目标层\">\r\n                    <template slot-scope=\"scope\">\r\n                      <span\r\n                        v-if=\"\r\n                          scope.row.index === tabClickIndex &&\r\n                          tabClickLabel === '目标层'\r\n                        \"\r\n                      >\r\n                        <el-input\r\n                          v-model=\"scope.row.Target\"\r\n                          maxlength=\"300\"\r\n                          placeholder=\"请输入目标层\"\r\n                          size=\"mini\"\r\n                          @blur=\"inputBlur\"\r\n                        />\r\n                      </span>\r\n                      <span v-else>{{ scope.row.Target }}</span>\r\n                    </template>\r\n                  </el-table-column>\r\n                  <el-table-column prop=\"Index\" label=\"指标层\">\r\n                    <template slot-scope=\"scope\">\r\n                      <span\r\n                        v-if=\"\r\n                          scope.row.index === tabClickIndex &&\r\n                          tabClickLabel === '指标层'\r\n                        \"\r\n                      >\r\n                        <el-input\r\n                          v-model=\"scope.row.Index\"\r\n                          maxlength=\"300\"\r\n                          placeholder=\"请输入指标层\"\r\n                          size=\"mini\"\r\n                          @blur=\"inputBlur\"\r\n                        />\r\n                      </span>\r\n                      <span v-else>{{ scope.row.Index }}</span>\r\n                    </template>\r\n                  </el-table-column>\r\n                  <el-table-column prop=\"Factor\" label=\"因子层\">\r\n                    <template slot-scope=\"scope\">\r\n                      <span\r\n                        v-if=\"\r\n                          scope.row.index === tabClickIndex &&\r\n                          tabClickLabel === '因子层'\r\n                        \"\r\n                      >\r\n                        <el-input\r\n                          v-model=\"scope.row.Factor\"\r\n                          maxlength=\"300\"\r\n                          placeholder=\"请输入因子层\"\r\n                          size=\"mini\"\r\n                          @blur=\"inputBlur\"\r\n                        />\r\n                      </span>\r\n                      <span v-else>{{ scope.row.Factor }}</span>\r\n                    </template>\r\n                  </el-table-column>\r\n                  <el-table-column prop=\"FactorLayer\" label=\"因子\">\r\n                    <template slot-scope=\"scope\">\r\n                      <span\r\n                        v-if=\"\r\n                          scope.row.index === tabClickIndex &&\r\n                          tabClickLabel === '因子'\r\n                        \"\r\n                      >\r\n                        <el-input\r\n                          v-model=\"scope.row.FactorLayer\"\r\n                          maxlength=\"300\"\r\n                          placeholder=\"请输入因子\"\r\n                          size=\"mini\"\r\n                          @blur=\"inputBlur\"\r\n                        />\r\n                      </span>\r\n                      <span v-else>{{ scope.row.FactorLayer }}</span>\r\n                    </template>\r\n                  </el-table-column>\r\n                </el-table>\r\n                <el-row style=\"text-align: center; padding: 10px\">\r\n                  <el-button\r\n                    @click=\"ButtonClick()\"\r\n                    type=\"success\"\r\n                    icon=\"el-icon-check\"\r\n                    circle\r\n                  ></el-button>\r\n                  <el-button\r\n                    type=\"danger\"\r\n                    icon=\"el-icon-delete\"\r\n                    circle\r\n                  ></el-button>\r\n                </el-row>\r\n              </el-tab-pane>\r\n              <el-tab-pane label=\"自定义指标体系\">\r\n                <div class=\"CustomTableBackground\">\r\n                  <h4 style=\"text-align: center\">体系选择</h4>\r\n                  <el-row style=\"text-align: center\">\r\n                    <span>一级目标层：</span>\r\n                    <el-select v-model=\"OneReturn\" placeholder=\"请选择\">\r\n                      <el-option\r\n                        v-for=\"item in ListOne\"\r\n                        :key=\"item.一级目标\"\r\n                        :label=\"item.一级目标\"\r\n                        :value=\"item.一级目标\"\r\n                      >\r\n                      </el-option>\r\n                    </el-select>\r\n                  </el-row>\r\n                  <el-row style=\"text-align: center; padding: 10px\">\r\n                    <span>二级指标层：</span>\r\n                    <el-select v-model=\"TwoReturn\" placeholder=\"请选择\">\r\n                      <el-option\r\n                        v-for=\"item in ListTwo\"\r\n                        :key=\"item.二级指数\"\r\n                        :label=\"item.二级指数\"\r\n                        :value=\"item.二级指数\"\r\n                      >\r\n                      </el-option>\r\n                    </el-select>\r\n                  </el-row>\r\n                  <el-row style=\"text-align: center\">\r\n                    <span>三级因子层：</span>\r\n                    <el-select v-model=\"ThreeReturn\" placeholder=\"请选择\">\r\n                      <el-option\r\n                        v-for=\"item in ListThree\"\r\n                        :key=\"item.评价因子\"\r\n                        :label=\"item.评价因子\"\r\n                        :value=\"item.评价因子\"\r\n                      >\r\n                      </el-option>\r\n                    </el-select>\r\n                  </el-row>\r\n                  <el-row style=\"text-align: center; padding: 10px\">\r\n                    <el-button\r\n                      @click=\"ButtonClick1()\"\r\n                      type=\"success\"\r\n                      icon=\"el-icon-check\"\r\n                      circle\r\n                    ></el-button>\r\n                    <el-button\r\n                      @click=\"deleteClick1()\"\r\n                      type=\"danger\"\r\n                      icon=\"el-icon-delete\"\r\n                      circle\r\n                    ></el-button>\r\n                  </el-row>\r\n                  <el-row>\r\n                    <h4 style=\"text-align: center\">指标体系</h4>\r\n                    <el-table\r\n                      class=\"tableStyle data-show-table\"\r\n                      :data=\"CustomDataTables\"\r\n                      :span-method=\"arraySpanMethod2\"\r\n                      :row-class-name=\"TableCell\"\r\n                      border\r\n                      :max-height=\"tableHeight2\"\r\n                      @cell-click=\"cellClick\"\r\n                    >\r\n                      <el-table-column prop=\"Target\" label=\"目标层\">\r\n                        <template slot-scope=\"scope\">\r\n                          <span\r\n                            v-if=\"\r\n                              scope.row.index === tabClickIndex &&\r\n                              tabClickLabel === '目标层'\r\n                            \"\r\n                          >\r\n                            <el-input\r\n                              v-model=\"scope.row.Target\"\r\n                              maxlength=\"300\"\r\n                              placeholder=\"请输入目标层\"\r\n                              size=\"mini\"\r\n                              @blur=\"inputBlur\"\r\n                            />\r\n                          </span>\r\n                          <span v-else>{{ scope.row.Target }}</span>\r\n                        </template>\r\n                      </el-table-column>\r\n                      <el-table-column prop=\"Index\" label=\"指标层\">\r\n                        <template slot-scope=\"scope\">\r\n                          <span\r\n                            v-if=\"\r\n                              scope.row.index === tabClickIndex &&\r\n                              tabClickLabel === '指标层'\r\n                            \"\r\n                          >\r\n                            <el-input\r\n                              v-model=\"scope.row.Index\"\r\n                              maxlength=\"300\"\r\n                              placeholder=\"请输入指标层\"\r\n                              size=\"mini\"\r\n                              @blur=\"inputBlur\"\r\n                            />\r\n                          </span>\r\n                          <span v-else>{{ scope.row.Index }}</span>\r\n                        </template>\r\n                      </el-table-column>\r\n                      <el-table-column prop=\"Factor\" label=\"因子层\">\r\n                        <template slot-scope=\"scope\">\r\n                          <span\r\n                            v-if=\"\r\n                              scope.row.index === tabClickIndex &&\r\n                              tabClickLabel === '因子层'\r\n                            \"\r\n                          >\r\n                            <el-input\r\n                              v-model=\"scope.row.Factor\"\r\n                              maxlength=\"300\"\r\n                              placeholder=\"请输入因子层\"\r\n                              size=\"mini\"\r\n                              @blur=\"inputBlur\"\r\n                            />\r\n                          </span>\r\n                          <span v-else>{{ scope.row.Factor }}</span>\r\n                        </template>\r\n                      </el-table-column>\r\n                      <el-table-column prop=\"FactorLayer\" label=\"因子\">\r\n                        <template slot-scope=\"scope\">\r\n                          <span\r\n                            v-if=\"\r\n                              scope.row.index === tabClickIndex &&\r\n                              tabClickLabel === '因子'\r\n                            \"\r\n                          >\r\n                            <el-input\r\n                              v-model=\"scope.row.FactorLayer\"\r\n                              maxlength=\"300\"\r\n                              placeholder=\"请输入因子\"\r\n                              size=\"mini\"\r\n                              @blur=\"inputBlur\"\r\n                            />\r\n                          </span>\r\n                          <span v-else>{{ scope.row.FactorLayer }}</span>\r\n                        </template>\r\n                      </el-table-column>\r\n                    </el-table>\r\n                  </el-row>\r\n                  <el-row style=\"text-align: center; padding: 10px\">\r\n                    <el-button\r\n                      @click=\"ButtonClick2()\"\r\n                      type=\"success\"\r\n                      icon=\"el-icon-check\"\r\n                      circle\r\n                    ></el-button>\r\n                    <el-button\r\n                      @click=\"deleteClick2()\"\r\n                      type=\"danger\"\r\n                      icon=\"el-icon-delete\"\r\n                      circle\r\n                    ></el-button>\r\n                  </el-row>\r\n                </div>\r\n              </el-tab-pane>\r\n              <el-tab-pane label=\"指标权重设置\">\r\n                <div class=\"CustomTableBackground\">\r\n                  <h4 style=\"text-align: center\">权重设置</h4>\r\n                  <el-table\r\n                    class=\"tableStyle data-show-table\"\r\n                    :data=\"WeightDataTable\"\r\n                    :span-method=\"arraySpanMethod2\"\r\n                    @cell-click=\"WeightCellClick\"\r\n                    border\r\n                  >\r\n                    <el-table-column prop=\"Target\" label=\"目标层\">\r\n                    </el-table-column>\r\n                    <el-table-column prop=\"Index\" label=\"指标层\">\r\n                      <template slot-scope=\"scope\">\r\n                        <el-popover trigger=\"click\" placement=\"top\">\r\n                          <p>\r\n                            权重:{{ scope.row.IndexWeight }}<br />\r\n                            <el-input\r\n                              v-model=\"WeightInput\"\r\n                              placeholder=\"请输入权重\"\r\n                            ></el-input>\r\n                          </p>\r\n                          <el-button\r\n                            type=\"primary\"\r\n                            size=\"mini\"\r\n                            @click=\"WeightDataClick1()\"\r\n                            >确定</el-button\r\n                          >\r\n                          <div slot=\"reference\">\r\n                            <div>{{ scope.row.Index }}</div>\r\n                          </div>\r\n                        </el-popover>\r\n                      </template>\r\n                    </el-table-column>\r\n                    <el-table-column prop=\"Factor\" label=\"因子层\">\r\n                      <template slot-scope=\"scope\">\r\n                        <el-popover trigger=\"click\" placement=\"top\">\r\n                          <p>\r\n                            权重:{{ scope.row.FactorWeight }}<br />\r\n                            <el-input\r\n                              v-model=\"WeightInput\"\r\n                              placeholder=\"请输入权重\"\r\n                            ></el-input>\r\n                          </p>\r\n                          <el-button\r\n                            type=\"primary\"\r\n                            size=\"mini\"\r\n                            @click=\"WeightDataClick2()\"\r\n                            >确定</el-button\r\n                          >\r\n                          <div slot=\"reference\">\r\n                            <div>{{ scope.row.Factor }}</div>\r\n                          </div>\r\n                        </el-popover>\r\n                      </template>\r\n                    </el-table-column>\r\n                    <el-table-column prop=\"FactorLayer\" label=\"因子\">\r\n                      <template slot-scope=\"scope\">\r\n                        <el-popover trigger=\"click\" placement=\"top\">\r\n                          <p>\r\n                            权重:{{ scope.row.FactorLayerWeight }}<br />\r\n                            <el-input\r\n                              v-model=\"WeightInput\"\r\n                              placeholder=\"请输入权重\"\r\n                            ></el-input>\r\n                          </p>\r\n                          <p>\r\n                            数据:{{ scope.row.FactorLayerData }}<br />\r\n                            <el-input\r\n                              v-model=\"DataInput\"\r\n                              placeholder=\"请输入数据\"\r\n                            ></el-input>\r\n                          </p>\r\n                          <el-button\r\n                            type=\"primary\"\r\n                            size=\"mini\"\r\n                            @click=\"WeightDataClick3()\"\r\n                            >确定</el-button\r\n                          >\r\n                          <div slot=\"reference\">\r\n                            <div>{{ scope.row.FactorLayer }}</div>\r\n                          </div>\r\n                        </el-popover>\r\n                      </template>\r\n                    </el-table-column>\r\n                  </el-table>\r\n                  <el-row style=\"text-align: center; padding: 10px\">\r\n                    <el-button\r\n                      @click=\"CalculateClick()\"\r\n                      type=\"success\"\r\n                      icon=\"el-icon-check\"\r\n                      circle\r\n                    ></el-button>\r\n                    <el-button\r\n                      type=\"danger\"\r\n                      icon=\"el-icon-delete\"\r\n                      circle\r\n                    ></el-button>\r\n                  </el-row>\r\n                  <el-row>\r\n                    <h4 style=\"text-align: center\">结果展示</h4>\r\n                    <el-table\r\n                      class=\"tableStyle data-show-table\"\r\n                      :data=\"ResultDataTable\"\r\n                      :span-method=\"arraySpanMethod2\"\r\n                      @cell-click=\"WeightCellClick\"\r\n                      border\r\n                    >\r\n                      <el-table-column prop=\"Target\" label=\"目标层\">\r\n                        <template slot-scope=\"scope\">\r\n                          <div>{{ scope.row.Target }}</div>\r\n                          <div>得分：{{ scope.row.TargetData }}</div>\r\n                        </template>\r\n                      </el-table-column>\r\n                      <el-table-column prop=\"Index\" label=\"指标层\">\r\n                        <template slot-scope=\"scope\">\r\n                          <div>{{ scope.row.Index }}</div>\r\n                          <div>得分：{{ scope.row.IndexData }}</div>\r\n                        </template>\r\n                      </el-table-column>\r\n                      <el-table-column prop=\"Factor\" label=\"因子层\">\r\n                        <template slot-scope=\"scope\">\r\n                          <div>{{ scope.row.Factor }}</div>\r\n                          <div>得分：{{ scope.row.FactorData }}</div>\r\n                        </template>\r\n                      </el-table-column>\r\n                      <el-table-column prop=\"FactorLayer\" label=\"因子\">\r\n                        <template slot-scope=\"scope\">\r\n                          <div>{{ scope.row.FactorLayer }}</div>\r\n                          <div>得分：{{ scope.row.FactorLayerData }}</div>\r\n                        </template>\r\n                      </el-table-column>\r\n                    </el-table>\r\n                  </el-row>\r\n                </div>\r\n              </el-tab-pane>\r\n            </el-tabs>\r\n          </div>\r\n        </el-col>\r\n        <el-col class=\"data-show-map-wrapper\" :span=\"15\" :offset=\"1\">\r\n          <div id=\"data-show-map\"></div>\r\n        </el-col>\r\n      </el-row>\r\n    </el-main>\r\n    <el-footer class=\"data-show-footer\" style=\"height: 20px\">\r\n      <span>\r\n        <a\r\n          href=\"http://geomodeling.njnu.edu.cn//\"\r\n          target=\"__blank\"\r\n          rel=\"noopener noreferrer\"\r\n          >Open Geographic Modeling and Simulation</a\r\n        >\r\n        | Copyright © 2011-{{ currentYear }} OpenGMS. All Rights Reserved.\r\n      </span>\r\n    </el-footer>\r\n  </el-container>\r\n</template>\r\n\r\n<script>\r\nimport { AnalyzeMap } from \"../js/AnalyzeMap\";\r\nimport { SplitJson } from \"@/views/EvaluateAnalyze/js/getData\";\r\nimport {\r\n  AddJsonData,\r\n  DeleteJsonDate,\r\n  createJsonDataOfDatatset,\r\n  CalculateData,\r\n} from \"../js/optionData\";\r\n\r\nexport default {\r\n  name: \"SystemPage2\",\r\n  data() {\r\n    return {\r\n      //这是在现有体系页面所需要的数据\r\n      SDGsIndex: [\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"资源承载\",\r\n          Factor: \"土地资源承载力\",\r\n          FactorLayer: \"地形起伏度\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"资源承载\",\r\n          Factor: \"土地资源承载力\",\r\n          FactorLayer: \"耕地面积占比\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"资源承载\",\r\n          Factor: \"土地资源承载力\",\r\n          FactorLayer: \"土地利用程度\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"资源承载\",\r\n          Factor: \"水资源丰度\",\r\n          FactorLayer: \"水资源可用量\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"资源承载\",\r\n          Factor: \"自然环境危害性\",\r\n          FactorLayer: \"气象灾害\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"资源承载\",\r\n          Factor: \"自然环境危害性\",\r\n          FactorLayer: \"地质灾害\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"环境压力\",\r\n          Factor: \"环境污染\",\r\n          FactorLayer: \"大气环境污染\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"环境压力\",\r\n          Factor: \"环境污染\",\r\n          FactorLayer: \"水环境污染\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"环境压力\",\r\n          Factor: \"环境污染\",\r\n          FactorLayer: \"土壤环境污染\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"环境压力\",\r\n          Factor: \"环境保护\",\r\n          FactorLayer: \"森林覆盖率\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"环境压力\",\r\n          Factor: \"环境保护\",\r\n          FactorLayer: \"生物丰富度\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"环境压力\",\r\n          Factor: \"环境保护\",\r\n          FactorLayer: \"自然保护区面积\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"环境压力\",\r\n          Factor: \"环境保护\",\r\n          FactorLayer: \"自然保护区面积\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"生态资产\",\r\n          Factor: \"自然资源价值\",\r\n          FactorLayer: \"有机质生产价值\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"生态资产\",\r\n          Factor: \"自然资源价值\",\r\n          FactorLayer: \"生态经济产品价值\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"生态资产\",\r\n          Factor: \"生态系统服务价值\",\r\n          FactorLayer: \"固碳释氧价值\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"生态资产\",\r\n          Factor: \"生态系统服务价值\",\r\n          FactorLayer: \"涵养水源价值\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"生态资产\",\r\n          Factor: \"生态系统服务价值\",\r\n          FactorLayer: \"净化空气价值\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"生态资产\",\r\n          Factor: \"生态系统服务价值\",\r\n          FactorLayer: \"营养物质循环价值\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"生态资产\",\r\n          Factor: \"生态系统服务价值\",\r\n          FactorLayer: \"土壤保持价值\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"生态资产\",\r\n          Factor: \"生态系统服务价值\",\r\n          FactorLayer: \"生物多样性\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"发展能力\",\r\n          Factor: \"经济活力\",\r\n          FactorLayer: \"净化空气价值\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"发展能力\",\r\n          Factor: \"经济活力\",\r\n          FactorLayer: \"经济规模水平\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"发展能力\",\r\n          Factor: \"经济活力\",\r\n          FactorLayer: \"产业结构水平\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"发展能力\",\r\n          Factor: \"经济活力\",\r\n          FactorLayer: \"财政及社会保障\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"发展能力\",\r\n          Factor: \"经济活力\",\r\n          FactorLayer: \"居民生活与消费\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"发展能力\",\r\n          Factor: \"经济活力\",\r\n          FactorLayer: \"科技教育水平\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"发展能力\",\r\n          Factor: \"基础设施\",\r\n          FactorLayer: \"关键交通节点可达性\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"发展能力\",\r\n          Factor: \"社会服务\",\r\n          FactorLayer: \"公共服务设施便捷度\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"零碳排放\",\r\n          Factor: \"碳排放\",\r\n          FactorLayer: \"能源消耗碳排放\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"零碳排放\",\r\n          Factor: \"碳排放\",\r\n          FactorLayer: \"工业生产过程碳排放\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"零碳排放\",\r\n          Factor: \"碳排放\",\r\n          FactorLayer: \"农业活动碳排放\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"零碳排放\",\r\n          Factor: \"碳排放\",\r\n          FactorLayer: \"生活项目碳排放\",\r\n        },\r\n        {\r\n          Target: \"生态文明指数\",\r\n          Index: \"零碳排放\",\r\n          Factor: \"碳吸收\",\r\n          FactorLayer: \"生态系统碳吸收量\",\r\n        },\r\n      ],\r\n      currentYear: new Date().getFullYear(),\r\n      //载入体系页面需要的数据\r\n      needMergeArr: [\"Target\", \"Index\", \"Factor\"],\r\n      rowMergeArrs: {},\r\n      rowCustomMergeArrs: {},\r\n      tabClickIndex: null, // 点击的单元格\r\n      tabClickLabel: \"\", // 当前点击的列名\r\n\r\n      //这是在自定义页面所需要的数据\r\n      ListOne: [],\r\n      OneReturn: \"\",\r\n      ListTwo: [],\r\n      TwoReturn: \"\",\r\n      ListThree: [],\r\n      ThreeReturn: \"\",\r\n\r\n      //返回的JSON数据表格\r\n      CustomDataTables: [],\r\n\r\n      //自适应浏览器高度\r\n      tableHeight: \"\",\r\n      tableHeight2: \"\",\r\n\r\n      //设置权重页面所需要的Json数据\r\n      WeightDataTable: \"\",\r\n\r\n      //设置权重页面输入框所需要的数据\r\n      WeightDataIndex: \"\",\r\n      WeightInput: \"\",\r\n      DataInput: \"\",\r\n\r\n      //最后结果数据\r\n      ResultDataTable: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    mapInit() {\r\n      this.mapObj = new AnalyzeMap(\"data-show-map\");\r\n      this.mapObj.AddGeoJson();\r\n    },\r\n    // 合拼单元格方法\r\n    arraySpanMethod({ column, rowIndex }) {\r\n      // 把需要循环的列名加入\r\n      if (column.property === \"Target\")\r\n        return this.mergeAction(\"Target\", rowIndex);\r\n      if (column.property === \"Index\")\r\n        return this.mergeAction(\"Index\", rowIndex);\r\n      if (column.property === \"Factor\")\r\n        return this.mergeAction(\"Factor\", rowIndex);\r\n    },\r\n\r\n    mergeAction(val, rowIndex) {\r\n      let _row = this.rowMergeArrs[val].rowArr[rowIndex];\r\n      let _col = _row > 0 ? 1 : 0;\r\n      return [_row, _col];\r\n    },\r\n\r\n    //自定义界面表格合拼\r\n    arraySpanMethod2({ column, rowIndex }) {\r\n      // 把需要循环的列名加入\r\n      if (column.property === \"Target\")\r\n        return this.mergeAction2(\"Target\", rowIndex);\r\n      if (column.property === \"Index\")\r\n        return this.mergeAction2(\"Index\", rowIndex);\r\n      if (column.property === \"Factor\")\r\n        return this.mergeAction2(\"Factor\", rowIndex);\r\n    },\r\n    mergeAction2(val, rowIndex) {\r\n      let _row = this.rowCustomMergeArrs[val].rowArr[rowIndex];\r\n      let _col = _row > 0 ? 1 : 0;\r\n      return [_row, _col];\r\n    },\r\n\r\n    rowMergeHandle(arr, data) {\r\n      if (!Array.isArray(arr) && !arr.length) return false;\r\n      if (!Array.isArray(data) && !data.length) return false;\r\n      let needMerge = {};\r\n      arr.forEach((i) => {\r\n        needMerge[i] = {\r\n          rowArr: [],\r\n          rowMergeNum: 0,\r\n        };\r\n        data.forEach((item, index) => {\r\n          if (index === 0) {\r\n            needMerge[i].rowArr.push(1);\r\n            needMerge[i].rowMergeNum = 0;\r\n          } else {\r\n            if (item[i] === data[index - 1][i]) {\r\n              needMerge[i].rowArr[needMerge[i].rowMergeNum] += 1;\r\n              needMerge[i].rowArr.push(0);\r\n            } else {\r\n              needMerge[i].rowArr.push(1);\r\n              needMerge[i].rowMergeNum = index;\r\n            }\r\n          }\r\n        });\r\n      });\r\n      return needMerge;\r\n    },\r\n    //现有体系页面单元格点击事件\r\n    TableCell({ row, rowIndex }) {\r\n      row.index = rowIndex;\r\n    },\r\n    cellClick(row, column) {\r\n      switch (column.label) {\r\n        case \"目标层\":\r\n          this.tabClickIndex = row.index;\r\n          this.tabClickLabel = column.label;\r\n          break;\r\n        case \"指标层\":\r\n          this.tabClickIndex = row.index;\r\n          this.tabClickLabel = column.label;\r\n          break;\r\n        case \"因子层\":\r\n          this.tabClickIndex = row.index;\r\n          this.tabClickLabel = column.label;\r\n          break;\r\n        case \"因子\":\r\n          this.tabClickIndex = row.index;\r\n          this.tabClickLabel = column.label;\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n    },\r\n    //失去焦点初始化\r\n    inputBlur() {\r\n      this.tabClickIndex = null;\r\n      this.tabClickLabel = \"\";\r\n    },\r\n    //载入体系页面点击事件\r\n    ButtonClick() {},\r\n\r\n    //自定义页面点击事件,把数据传到表格里\r\n    ButtonClick1() {\r\n      AddJsonData(\r\n        this.OneReturn,\r\n        this.TwoReturn,\r\n        this.ThreeReturn,\r\n        this.CustomDataTables\r\n      );\r\n      //挂载自定义体系表格合拼\r\n      this.rowCustomMergeArrs = this.rowMergeHandle(\r\n        this.needMergeArr,\r\n        this.CustomDataTables\r\n      );\r\n    },\r\n    deleteClick1() {\r\n      DeleteJsonDate(this.CustomDataTables);\r\n    },\r\n    //自定义页面表格点击事件，导出数据\r\n    ButtonClick2() {\r\n      this.WeightDataTable = this.CustomDataTables;\r\n    },\r\n    deleteClick2() {},\r\n\r\n    //权重设置页面单元格点击事件\r\n    WeightCellClick(row) {\r\n      //点击自定义单元格把第几列数据传入\r\n      this.WeightDataIndex = row.index;\r\n    },\r\n    //权重设置页面通过点击确定为其设置权重和数据\r\n    WeightDataClick1() {\r\n      createJsonDataOfDatatset(\r\n        \"IndexWeight\",\r\n        this.WeightInput,\r\n        this.WeightDataTable,\r\n        this.WeightDataIndex\r\n      );\r\n    },\r\n    WeightDataClick2() {\r\n      createJsonDataOfDatatset(\r\n        \"FactorWeight\",\r\n        this.WeightInput,\r\n        this.WeightDataTable,\r\n        this.WeightDataIndex\r\n      );\r\n    },\r\n\r\n    WeightDataClick3() {\r\n      createJsonDataOfDatatset(\r\n        \"FactorLayerWeight\",\r\n        this.WeightInput,\r\n        this.WeightDataTable,\r\n        this.WeightDataIndex\r\n      );\r\n      createJsonDataOfDatatset(\r\n        \"FactorLayerData\",\r\n        this.DataInput,\r\n        this.WeightDataTable,\r\n        this.WeightDataIndex\r\n      );\r\n    },\r\n    //权重设置页面进行计算\r\n    CalculateClick() {\r\n      CalculateData(this.WeightDataTable);\r\n      this.ResultDataTable = this.WeightDataTable;\r\n    },\r\n  },\r\n  //挂载前加载地图\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      // 根据浏览器高度设置初始高度\r\n      this.tableHeight = window.innerHeight - 300;\r\n      this.tableHeight2 = window.innerHeight - 570;\r\n      // 监听浏览器高度变化，改变表格高度\r\n      window.onresize = () => {\r\n        this.tableHeight = window.innerHeight - 300;\r\n        this.tableHeight2 = window.innerHeight - 570;\r\n      };\r\n    });\r\n    this.rowMergeArrs = this.rowMergeHandle(this.needMergeArr, this.SDGsIndex);\r\n    this.mapInit();\r\n    this.ListOne = SplitJson(\"维度\", \"目标\", \"领域\", \"一级指标\", \"一级目标\");\r\n    this.ListTwo = SplitJson(\r\n      \"具体目标\",\r\n      \"具体目标\",\r\n      \"指数\",\r\n      \"二级指标\",\r\n      \"二级指数\"\r\n    );\r\n    this.ListThree = SplitJson(\r\n      \"评价指标\",\r\n      \"具体指标\",\r\n      \"指标\",\r\n      \"评价因子\",\r\n      \"评价因子\"\r\n    );\r\n  },\r\n  //之后销毁地图\r\n  beforeDestroy() {\r\n    this.mapObj && this.mapObj.destroy();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.data-show {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n.data-show-main {\r\n  height: 95%;\r\n  width: 100%;\r\n}\r\n\r\n.data-show-header,\r\n.data-show-map-wrapper,\r\n.data-show-header div,\r\n.data-show-content > div {\r\n  height: 100%;\r\n}\r\n.data-show-header-banner {\r\n  font-size: 2rem;\r\n  margin: 0;\r\n  color: white;\r\n  height: 59px;\r\n  line-height: 59px;\r\n}\r\n\r\n.data-show-content {\r\n  padding: 30px 20px;\r\n}\r\n\r\n.data-show-sider {\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: rgba(0, 0, 0, 0.1);\r\n  position: relative;\r\n}\r\n\r\n.data-show-table {\r\n  height: 95%;\r\n  width: 95%;\r\n  margin-top: 2.5%;\r\n  margin-left: 2.5%;\r\n  margin-bottom: 2.5%;\r\n}\r\n\r\n.header-logo {\r\n  display: block;\r\n  height: 100%;\r\n  background: url(\"../../../assets/picture/logo.png\") no-repeat scroll left\r\n    center;\r\n  background-size: auto 35px;\r\n}\r\n\r\n.data-show-map-wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 10px;\r\n  background-color: rgba(0, 0, 0, 0.1);\r\n  background-size: 100% 100%;\r\n}\r\n\r\n/deep/.el-tabs__item {\r\n  padding: 0 20px;\r\n  height: 40px;\r\n  box-sizing: border-box;\r\n  display: inline-block;\r\n  list-style: none;\r\n  font-size: 15px;\r\n  font-weight: 500;\r\n  margin-left: 2px;\r\n  color: #ffffff;\r\n}\r\n\r\n.CustomTableBackground {\r\n  width: 95%;\r\n  height: 100%;\r\n  background-color: #ffffff;\r\n  margin-left: 10px;\r\n  margin-right: 10px;\r\n}\r\n\r\n#data-show-map {\r\n  height: 95%;\r\n  width: 95%;\r\n}\r\n\r\n.data-show-footer {\r\n  position: relative;\r\n  height: 20px;\r\n  padding: 0;\r\n  background-color: rgba(255, 255, 255, 0.6);\r\n}\r\n\r\n.data-show-footer > span {\r\n  right: 10px;\r\n  position: absolute;\r\n}\r\n</style>\r\n"],"mappings":";AAicA,SAAAA,UAAA;AACA,SAAAC,SAAA;AACA,SACAC,WAAA,EACAC,cAAA,EACAC,wBAAA,EACAC,aAAA,QACA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACA;MACAC,SAAA,GACA;QACAC,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,MAAA;QACAC,KAAA;QACAC,MAAA;QACAC,WAAA;MACA,EACA;MACAC,WAAA,MAAAC,IAAA,GAAAC,WAAA;MACA;MACAC,YAAA;MACAC,YAAA;MACAC,kBAAA;MACAC,aAAA;MAAA;MACAC,aAAA;MAAA;;MAEA;MACAC,OAAA;MACAC,SAAA;MACAC,OAAA;MACAC,SAAA;MACAC,SAAA;MACAC,WAAA;MAEA;MACAC,gBAAA;MAEA;MACAC,WAAA;MACAC,YAAA;MAEA;MACAC,eAAA;MAEA;MACAC,eAAA;MACAC,WAAA;MACAC,SAAA;MAEA;MACAC,eAAA;IACA;EACA;EACAC,OAAA;IACAC,QAAA;MACA,KAAAC,MAAA,OAAArC,UAAA;MACA,KAAAqC,MAAA,CAAAC,UAAA;IACA;IACA;IACAC,gBAAA;MAAAC,MAAA;MAAAC;IAAA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}