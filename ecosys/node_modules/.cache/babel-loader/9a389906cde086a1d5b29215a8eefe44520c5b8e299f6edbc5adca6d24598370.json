{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Global from \"../Globel/Global\";\nimport { AddJsonData, DeleteJsonDate, createJsonDataOfDatatset, CalculateData } from \"../../js/optionData\";\nexport default {\n  name: \"SystemTable\",\n  data() {\n    return {\n      //data for PART1\n      needMergeArr: [\"Target\", \"Factor\"],\n      rowMergeArrs: {},\n      rowCustomMergeArrs: {},\n      tabClickIndex: null,\n      // current click index\n      tabClickLabel: \"\",\n      // current click label\n\n      //table position controller\n      tableHeight: \"\",\n      tableHeight2: \"\",\n      MapZone: Global.MapClickData,\n      //select options\n      options: [{\n        Two: \"Urbanization\",\n        Three: [\"Sealed_area\", \"Non_vegetated_unsealed_surfaces\"]\n      }, {\n        Two: \"GreenSpaces\",\n        Three: [\"Woody\", \"Permanent_Herb\", \"Periodically_Herb\", \"Reeds\"]\n      }, {\n        Two: \"BlueSpaces\",\n        Three: [\"Water_area\", \"River_density\", \"Snow_and_ice\"]\n      }],\n      selectedOption: \"\",\n      selectedSubOption: \"\",\n      //Customised system in Json\n      CustomDataTables: [],\n      //default index system\n      EcoIndex: [{\n        index: 0,\n        Target: \"Environmental Index\",\n        Factor: \"Urbanization\",\n        FactorLayer: \"Sealed area\"\n      }, {\n        index: 1,\n        Target: \"Environmental Index\",\n        Factor: \"Urbanization\",\n        FactorLayer: \"Non-vegetated unsealed surfaces\"\n      }, {\n        index: 2,\n        Target: \"Environmental Index\",\n        Factor: \"GreenSpaces\",\n        FactorLayer: \"Woody\"\n      }, {\n        index: 3,\n        Target: \"Environmental Index\",\n        Factor: \"GreenSpaces\",\n        FactorLayer: \"Permanent Herb\"\n      }, {\n        index: 4,\n        Target: \"Environmental Index\",\n        Factor: \"GreenSpaces\",\n        FactorLayer: \"Periodically Herb\"\n      }, {\n        index: 5,\n        Target: \"Environmental Index\",\n        Factor: \"GreenSpaces\",\n        FactorLayer: \"Reeds\"\n      }, {\n        index: 6,\n        Target: \"Environmental Index\",\n        Factor: \"BlueSpaces\",\n        FactorLayer: \"Water area\"\n      }, {\n        index: 7,\n        Target: \"Environmental Index\",\n        Factor: \"BlueSpaces\",\n        FactorLayer: \"River density\"\n      }, {\n        index: 8,\n        Target: \"Environmental Index\",\n        Factor: \"BlueSpaces\",\n        FactorLayer: \"Snow and ice\"\n      }],\n      //data for PART3\n      WeightDataIndex: \"\",\n      WeightInput: \"\",\n      DataInput: \"\",\n      WeightDataTable: \"\",\n      //visibility of the popover\n      visible: false,\n      //judge the calculation state\n      CalculationState: 0,\n      ResultDataTable: \"\"\n    };\n  },\n  methods: {\n    // Weights page merge cell method\n    arraySpanMethod({\n      column,\n      rowIndex\n    }) {\n      // add column names need to be looped\n      if (column.property === \"Target\") return this.mergeAction(\"Target\", rowIndex);\n      if (column.property === \"Factor\") return this.mergeAction(\"Factor\", rowIndex);\n    },\n    mergeAction(val, rowIndex) {\n      let _row = this.rowMergeArrs[val].rowArr[rowIndex];\n      let _col = _row > 0 ? 1 : 0;\n      return [_row, _col];\n    },\n    //Customised form merge\n    arraySpanMethod2({\n      column,\n      rowIndex\n    }) {\n      if (column.property === \"Target\") return this.mergeAction2(\"Target\", rowIndex);\n      if (column.property === \"Factor\") return this.mergeAction2(\"Factor\", rowIndex);\n    },\n    mergeAction2(val, rowIndex) {\n      let _row = this.rowCustomMergeArrs[val].rowArr[rowIndex];\n      let _col = _row > 0 ? 1 : 0;\n      return [_row, _col];\n    },\n    rowMergeHandle(arr, data) {\n      if (!Array.isArray(arr) && !arr.length) return false;\n      if (!Array.isArray(data) && !data.length) return false;\n      let needMerge = {};\n      arr.forEach(i => {\n        needMerge[i] = {\n          rowArr: [],\n          rowMergeNum: 0\n        };\n        data.forEach((item, index) => {\n          if (index === 0) {\n            needMerge[i].rowArr.push(1);\n            needMerge[i].rowMergeNum = 0;\n          } else {\n            if (item[i] === data[index - 1][i]) {\n              needMerge[i].rowArr[needMerge[i].rowMergeNum] += 1;\n              needMerge[i].rowArr.push(0);\n            } else {\n              needMerge[i].rowArr.push(1);\n              needMerge[i].rowMergeNum = index;\n            }\n          }\n        });\n      });\n      return needMerge;\n    },\n    //click event in PART2\n    TableCell({\n      row,\n      rowIndex\n    }) {\n      row.index = rowIndex;\n    },\n    cellClick(row, column) {\n      switch (column.label) {\n        case \"TargetLayer\":\n          this.tabClickIndex = row.index;\n          this.tabClickLabel = column.label;\n          break;\n        case \"FactorLayer\":\n          this.tabClickIndex = row.index;\n          this.tabClickLabel = column.label;\n          break;\n        case \"Factor\":\n          this.tabClickIndex = row.index;\n          this.tabClickLabel = column.label;\n          break;\n        default:\n          return;\n      }\n    },\n    //initialize when lose focus\n    inputBlur() {\n      this.tabClickIndex = null;\n      this.tabClickLabel = \"\";\n    },\n    //Buttons on the system page\n    AddButtonClick() {\n      AddJsonData(this.selectedOption, this.selectedSubOption, this.CustomDataTables);\n      //Mount custom system form merge\n      this.rowCustomMergeArrs = this.rowMergeHandle(this.needMergeArr, this.CustomDataTables);\n    },\n    DeleteButtonClick() {\n      DeleteJsonDate(this.CustomDataTables);\n    },\n    ConfirmButtonClick() {\n      this.WeightDataTable = JSON.parse(JSON.stringify(this.CustomDataTables));\n      this.rowMergeArrs = this.rowMergeHandle(this.needMergeArr, this.WeightDataTable);\n      console.log(this.WeightDataTable);\n    },\n    CancelButtonClick() {\n      this.WeightDataTable = JSON.parse(JSON.stringify(this.EcoIndex));\n      this.rowMergeArrs = this.rowMergeHandle(this.needMergeArr, this.WeightDataTable);\n      console.log(this.WeightDataTable);\n    },\n    //weight setting\n    WeightCellClick(row) {\n      //get the index of the clicked row\n      this.WeightDataIndex = row.index;\n    },\n    //confirm for weight and data setting\n    WeightDataClick2(scope) {\n      createJsonDataOfDatatset(\"FactorWeight\", this.WeightInput, this.WeightDataTable, this.WeightDataIndex);\n      scope._self.$refs[`popover-${scope.$index}`].doClose();\n    },\n    handlePopoverShow(rowData) {\n      if (this.MapZone.length === 1) {\n        let currRegion = this.MapZone[0].name;\n        let currFactor = rowData.FactorLayer;\n        //find the data with name=currRegion use filter\n        let currData = Global.MapClickData.filter(item => item.name === currRegion);\n        currData = currData[0][currFactor];\n        this.DataInput = currData;\n        console.log(this.DataInput);\n      }\n    },\n    WeightDataClick3(scope) {\n      createJsonDataOfDatatset(\"FactorLayerWeight\", this.WeightInput, this.WeightDataTable, this.WeightDataIndex);\n      createJsonDataOfDatatset(\"FactorLayerData\", Number(this.DataInput), this.WeightDataTable, this.WeightDataIndex);\n      scope._self.$refs[`popover-${scope.$index}`].doClose();\n    },\n    //calculation event in PART3\n    CalculateClick() {\n      CalculateData(this.WeightDataTable);\n      this.ResultDataTable = this.WeightDataTable;\n      Global.ResultJson = this.ResultDataTable;\n      this.CalculationState = 1;\n      this.rowMergeArrs = this.rowMergeHandle(this.needMergeArr, this.WeightDataTable);\n      console.log(this.ResultDataTable);\n    },\n    //reset event in PART3\n    ReCalculateClick() {\n      this.CalculationState = 0;\n      this.rowMergeArrs = this.rowMergeHandle(this.needMergeArr, this.WeightDataTable);\n    },\n    handleChange() {\n      this.selectedSubOption = \"\";\n    }\n  },\n  computed: {\n    //for controls in PART1\n    optionSelects() {\n      let opt = this.options.find(i => i.Two === this.selectedOption);\n      let opt_res = opt ? opt.Three : [];\n      return opt_res;\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      // Responsive Design\n      this.tableHeight = window.innerHeight - 690;\n      this.tableHeight2 = window.innerHeight - 380;\n      window.onresize = () => {\n        this.tableHeight = window.innerHeight - 690;\n        this.tableHeight2 = window.innerHeight - 380;\n      };\n    });\n    this.WeightDataTable = JSON.parse(JSON.stringify(this.EcoIndex));\n    this.rowMergeArrs = this.rowMergeHandle(this.needMergeArr, this.WeightDataTable);\n  }\n};","map":{"version":3,"names":["Global","AddJsonData","DeleteJsonDate","createJsonDataOfDatatset","CalculateData","name","data","needMergeArr","rowMergeArrs","rowCustomMergeArrs","tabClickIndex","tabClickLabel","tableHeight","tableHeight2","MapZone","MapClickData","options","Two","Three","selectedOption","selectedSubOption","CustomDataTables","EcoIndex","index","Target","Factor","FactorLayer","WeightDataIndex","WeightInput","DataInput","WeightDataTable","visible","CalculationState","ResultDataTable","methods","arraySpanMethod","column","rowIndex","property","mergeAction","val","_row","rowArr","_col","arraySpanMethod2","mergeAction2","rowMergeHandle","arr","Array","isArray","length","needMerge","forEach","i","rowMergeNum","item","push","TableCell","row","cellClick","label","inputBlur","AddButtonClick","DeleteButtonClick","ConfirmButtonClick","JSON","parse","stringify","console","log","CancelButtonClick","WeightCellClick","WeightDataClick2","scope","_self","$refs","$index","doClose","handlePopoverShow","rowData","currRegion","currFactor","currData","filter","WeightDataClick3","Number","CalculateClick","ResultJson","ReCalculateClick","handleChange","computed","optionSelects","opt","find","opt_res","mounted","$nextTick","window","innerHeight","onresize"],"sources":["src/views/EvaluateAnalyze/views/SystemPageComponent/SystemTable.vue"],"sourcesContent":["<template>\r\n  <el-container style=\"width: 100%; height: 100%; background-color: #ffffff\">\r\n    <el-row style=\"text-align: center\">\r\n      <h1 class=\"heading-2\" style=\"font-weight: 800;height:10px\">\r\n        Evaluation System of the Environmental Index\r\n      </h1>\r\n    </el-row>\r\n    <el-row style=\"width: 100%; height: 90%\">\r\n      <!-- PART1+PART2-->\r\n      <el-col :offset=\"1\" class=\"SystemPageCol\">\r\n        <el-card\r\n          shadow=\"hover\"\r\n          style=\"height: 100%; width: 90%; text-align: center\"\r\n        >\r\n          <!-- PART1 Add Your Indicators -->\r\n          <h4 style=\"text-align: center; padding-top: 10px\">\r\n            Add Your Indicators\r\n          </h4>\r\n          <div class=\"subheading\" style=\"text-align: center\">\r\n            Selected Regions:\r\n            <span v-if=\"this.MapZone.length === 0\">\r\n              <div style=\"font-weight: 500\">\r\n                No selection applied! Please back to map view to select\r\n                regions😊\r\n              </div>\r\n            </span>\r\n            <span v-else>\r\n              {{ this.MapZone.map((item) => item.name) }}\r\n            </span>\r\n          </div>\r\n          <!-- FactorLayer drop-down box -->\r\n          <el-row style=\"text-align: center; padding: 10px\">\r\n            <span>FactorLayer: </span>\r\n            <el-select\r\n              v-model=\"selectedOption\"\r\n              placeholder=\"Please select\"\r\n              @change=\"handleChange\"\r\n            >\r\n              <el-option\r\n                v-for=\"(option, index) in options\"\r\n                :key=\"index\"\r\n                :label=\"option.Two\"\r\n                :value=\"option.Two\"\r\n              >\r\n              </el-option>\r\n            </el-select>\r\n          </el-row>\r\n          <!-- Factor drop-down box -->\r\n          <el-row style=\"text-align: center\">\r\n            <span>Factor: </span>\r\n            <el-select v-model=\"selectedSubOption\" placeholder=\"Please select\">\r\n              <el-option\r\n                v-for=\"(optionSelect, index) in optionSelects\"\r\n                :key=\"index\"\r\n                :label=\"optionSelect\"\r\n                :value=\"optionSelect\"\r\n              >\r\n              </el-option>\r\n            </el-select>\r\n          </el-row>\r\n          <!-- button group(1) -->\r\n          <el-row style=\"text-align: center; padding: 10px\">\r\n            <el-button\r\n              @click=\"AddButtonClick\"\r\n              type=\"primary\"\r\n              style=\"color: #ffffff\"\r\n              >Add</el-button\r\n            >\r\n            <el-button\r\n              @click=\"DeleteButtonClick\"\r\n              type=\"danger\"\r\n              style=\"color: #ffffff\"\r\n              >Delete</el-button\r\n            >\r\n          </el-row>\r\n          <br />\r\n          <br />\r\n          <!-- PART2 Structure of Indicator System -->\r\n          <el-row>\r\n            <h4 style=\"text-align: center\">Structure of Indicator System</h4>\r\n            <el-table\r\n              class=\"tableStyle data-show-table\"\r\n              :data=\"CustomDataTables\"\r\n              :span-method=\"arraySpanMethod2\"\r\n              :row-class-name=\"TableCell\"\r\n              border\r\n              :max-height=\"tableHeight\"\r\n              @cell-click=\"cellClick\"\r\n              empty-text=\"No relevant data\"\r\n            >\r\n              <el-table-column prop=\"Target\" label=\"TargetLayer\" width=\"180\">\r\n                <template slot-scope=\"scope\">\r\n                  <span\r\n                    v-if=\"\r\n                      scope.row.index === tabClickIndex &&\r\n                      tabClickLabel === 'TargetLayer'\r\n                    \"\r\n                  >\r\n                    <el-input\r\n                      v-model=\"scope.row.Target\"\r\n                      maxlength=\"300\"\r\n                      placeholder=\"Please enter the target layer\"\r\n                      size=\"mini\"\r\n                      @blur=\"inputBlur\"\r\n                    />\r\n                  </span>\r\n                  <span v-else>{{ scope.row.Target }}</span>\r\n                </template>\r\n              </el-table-column>\r\n\r\n              <el-table-column prop=\"Factor\" label=\"FactorLayer\">\r\n                <template slot-scope=\"scope\">\r\n                  <span\r\n                    v-if=\"\r\n                      scope.row.index === tabClickIndex &&\r\n                      tabClickLabel === 'FactorLayer'\r\n                    \"\r\n                  >\r\n                    <el-input\r\n                      v-model=\"scope.row.Factor\"\r\n                      maxlength=\"300\"\r\n                      placeholder=\"Please enter a factor layer\"\r\n                      size=\"mini\"\r\n                      @blur=\"inputBlur\"\r\n                    />\r\n                  </span>\r\n                  <span v-else>{{ scope.row.Factor }}</span>\r\n                </template>\r\n              </el-table-column>\r\n\r\n              <el-table-column prop=\"FactorLayer\" label=\"Factor\">\r\n                <template slot-scope=\"scope\">\r\n                  <span\r\n                    v-if=\"\r\n                      scope.row.index === tabClickIndex &&\r\n                      tabClickLabel === 'Factor'\r\n                    \"\r\n                  >\r\n                    <el-input\r\n                      v-model=\"scope.row.FactorLayer\"\r\n                      maxlength=\"300\"\r\n                      placeholder=\"Please enter a specific factor\"\r\n                      size=\"mini\"\r\n                      @blur=\"inputBlur\"\r\n                    />\r\n                  </span>\r\n                  <span v-else>{{ scope.row.FactorLayer }}</span>\r\n                </template>\r\n              </el-table-column>\r\n            </el-table>\r\n          </el-row>\r\n\r\n          <!-- button group(2)  -->\r\n          <el-row style=\"text-align: center; padding: 10px\">\r\n            <el-button\r\n              @click=\"ConfirmButtonClick\"\r\n              type=\"primary\"\r\n              style=\"color: #ffffff\"\r\n              >Confirm</el-button\r\n            >\r\n            <el-button\r\n              @click=\"CancelButtonClick\"\r\n              type=\"danger\"\r\n              style=\"color: #ffffff\"\r\n              >Delete</el-button\r\n            >\r\n          </el-row>\r\n        </el-card>\r\n      </el-col>\r\n\r\n      <!-- PART3 Analysis and Calculation -->\r\n      <el-col class=\"SystemPageCol\">\r\n        <el-card\r\n          shadow=\"hover\"\r\n          style=\"height: 100%; width: 100%; text-align: center\"\r\n        >\r\n          <h4 style=\"text-align: center\">Analysis and Calculation</h4>\r\n          <div style=\"width: 100%; height: 100%\" v-if=\"CalculationState === 1\">\r\n            <el-table\r\n              class=\"tableStyle data-show-table\"\r\n              :data=\"ResultDataTable\"\r\n              :span-method=\"arraySpanMethod\"\r\n              :max-height=\"tableHeight2\"\r\n              border\r\n            >\r\n              <el-table-column prop=\"Target\" label=\"TargetLayer\">\r\n                <template slot-scope=\"scope\">\r\n                  <div>{{ scope.row.Target }}</div>\r\n                  <div style=\"font-weight: 600\">\r\n                    Score: {{ scope.row.TargetData }}\r\n                  </div>\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column prop=\"Factor\" label=\"FactorLayer\">\r\n                <template slot-scope=\"scope\">\r\n                  <div>{{ scope.row.Factor }}</div>\r\n                  <div style=\"font-weight: 600\">\r\n                    Score: {{ scope.row.FactorData }}\r\n                  </div>\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column prop=\"FactorLayer\" label=\"Factor\">\r\n                <template slot-scope=\"scope\">\r\n                  <div>{{ scope.row.FactorLayer }}</div>\r\n                  <div style=\"font-weight: 600\">\r\n                    Score: {{ scope.row.FactorLayerData }}\r\n                  </div>\r\n                </template>\r\n              </el-table-column>\r\n            </el-table>\r\n          </div>\r\n          <div style=\"width: 100%; height: 100%\" v-else>\r\n            <el-table\r\n              class=\"tableStyle data-show-table\"\r\n              :data=\"WeightDataTable\"\r\n              :span-method=\"arraySpanMethod\"\r\n              :max-height=\"tableHeight2\"\r\n              @cell-click=\"WeightCellClick\"\r\n              border\r\n            >\r\n              <el-table-column prop=\"Target\" label=\"TargetLayer\">\r\n                <template slot-scope=\"scope\">\r\n                  <div>{{ scope.row.Target }}</div>\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column prop=\"Factor\" label=\"FactorLayer\">\r\n                <template slot-scope=\"scope\">\r\n                  <el-popover\r\n                    trigger=\"click\"\r\n                    placement=\"top\"\r\n                    :ref=\"`popover-${scope.$index}`\"\r\n                  >\r\n                    <p>\r\n                      Input weight: {{ scope.row.FactorWeight }}<br />\r\n                      <el-input\r\n                        v-model=\"WeightInput\"\r\n                        placeholder=\"Please input the weight\"\r\n                      ></el-input>\r\n                    </p>\r\n                    <el-button\r\n                      type=\"primary\"\r\n                      size=\"mini\"\r\n                      @click=\"WeightDataClick2(scope)\"\r\n                      >Confirm</el-button\r\n                    >\r\n                    <div slot=\"reference\">\r\n                      <div>{{ scope.row.Factor }}</div>\r\n                    </div>\r\n                  </el-popover>\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column prop=\"FactorLayer\" label=\"Factor\">\r\n                <template slot-scope=\"scope\">\r\n                  <el-popover\r\n                    trigger=\"click\"\r\n                    placement=\"top\"\r\n                    :ref=\"`popover-${scope.$index}`\"\r\n                    @show=\"handlePopoverShow(scope.row)\"\r\n                  >\r\n                    <p>\r\n                      Input weight: {{ scope.row.FactorLayerWeight }}<br />\r\n                      <el-input\r\n                        v-model=\"WeightInput\"\r\n                        placeholder=\"Please input the weight\"\r\n                      ></el-input>\r\n                    </p>\r\n                    <p>\r\n                      Input data: {{ scope.row.FactorLayerData }}\r\n                      <p style=\"font-size:small\">*If only 1 region is selected, a default value will be applied.</p>\r\n                      <el-input\r\n                        v-model=\"DataInput\"\r\n                        placeholder=\"Please input the data\"\r\n                      ></el-input>\r\n                    </p>\r\n                    <el-button\r\n                      type=\"primary\"\r\n                      size=\"mini\"\r\n                      @click=\"WeightDataClick3(scope)\"\r\n                      >Confirm</el-button\r\n                    >\r\n                    <div slot=\"reference\">\r\n                      <div>{{ scope.row.FactorLayer }}</div>\r\n                    </div>\r\n                  </el-popover>\r\n                </template>\r\n              </el-table-column>\r\n            </el-table>\r\n          </div>\r\n\r\n          <!-- button group(3) -->\r\n          <el-row style=\"text-align: center; padding-top: 10px\">\r\n            <el-button\r\n              @click=\"CalculateClick()\"\r\n              type=\"primary\"\r\n              round\r\n              style=\"color: #ffffff\"\r\n              >Calculate</el-button\r\n            >\r\n            <el-button\r\n              @click=\"ReCalculateClick()\"\r\n              type=\"danger\"\r\n              round\r\n              style=\"color: #ffffff\"\r\n              >Reset</el-button\r\n            >\r\n          </el-row>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n  </el-container>\r\n</template>\r\n\r\n<script>\r\nimport Global from \"../Globel/Global\";\r\nimport {\r\n  AddJsonData,\r\n  DeleteJsonDate,\r\n  createJsonDataOfDatatset,\r\n  CalculateData,\r\n} from \"../../js/optionData\";\r\nexport default {\r\n  name: \"SystemTable\",\r\n  data() {\r\n    return {\r\n      //data for PART1\r\n      needMergeArr: [\"Target\", \"Factor\"],\r\n      rowMergeArrs: {},\r\n      rowCustomMergeArrs: {},\r\n      tabClickIndex: null, // current click index\r\n      tabClickLabel: \"\", // current click label\r\n\r\n      //table position controller\r\n      tableHeight: \"\",\r\n      tableHeight2: \"\",\r\n\r\n      MapZone: Global.MapClickData,\r\n\r\n      //select options\r\n      options: [\r\n        {\r\n          Two: \"Urbanization\",\r\n          Three: [\"Sealed_area\", \"Non_vegetated_unsealed_surfaces\"],\r\n        },\r\n        {\r\n          Two: \"GreenSpaces\",\r\n          Three: [\"Woody\", \"Permanent_Herb\", \"Periodically_Herb\", \"Reeds\"],\r\n        },\r\n        {\r\n          Two: \"BlueSpaces\",\r\n          Three: [\"Water_area\", \"River_density\", \"Snow_and_ice\"],\r\n        },\r\n      ],\r\n      selectedOption: \"\",\r\n      selectedSubOption: \"\",\r\n      //Customised system in Json\r\n      CustomDataTables: [],\r\n\r\n      //default index system\r\n      EcoIndex: [\r\n        {\r\n          index: 0,\r\n          Target: \"Environmental Index\",\r\n          Factor: \"Urbanization\",\r\n          FactorLayer: \"Sealed area\",\r\n        },\r\n        {\r\n          index: 1,\r\n          Target: \"Environmental Index\",\r\n          Factor: \"Urbanization\",\r\n          FactorLayer: \"Non-vegetated unsealed surfaces\",\r\n        },\r\n        {\r\n          index: 2,\r\n          Target: \"Environmental Index\",\r\n          Factor: \"GreenSpaces\",\r\n          FactorLayer: \"Woody\",\r\n        },\r\n        {\r\n          index: 3,\r\n          Target: \"Environmental Index\",\r\n          Factor: \"GreenSpaces\",\r\n          FactorLayer: \"Permanent Herb\",\r\n        },\r\n        {\r\n          index: 4,\r\n          Target: \"Environmental Index\",\r\n          Factor: \"GreenSpaces\",\r\n          FactorLayer: \"Periodically Herb\",\r\n        },\r\n        {\r\n          index: 5,\r\n          Target: \"Environmental Index\",\r\n          Factor: \"GreenSpaces\",\r\n          FactorLayer: \"Reeds\",\r\n        },\r\n        {\r\n          index: 6,\r\n          Target: \"Environmental Index\",\r\n          Factor: \"BlueSpaces\",\r\n          FactorLayer: \"Water area\",\r\n        },\r\n        {\r\n          index: 7,\r\n          Target: \"Environmental Index\",\r\n          Factor: \"BlueSpaces\",\r\n          FactorLayer: \"River density\",\r\n        },\r\n        {\r\n          index: 8,\r\n          Target: \"Environmental Index\",\r\n          Factor: \"BlueSpaces\",\r\n          FactorLayer: \"Snow and ice\",\r\n        },\r\n      ],\r\n\r\n      //data for PART3\r\n      WeightDataIndex: \"\",\r\n      WeightInput: \"\",\r\n      DataInput: \"\",\r\n      WeightDataTable: \"\",\r\n      //visibility of the popover\r\n      visible: false,\r\n      //judge the calculation state\r\n      CalculationState: 0,\r\n      ResultDataTable: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    // Weights page merge cell method\r\n    arraySpanMethod({ column, rowIndex }) {\r\n      // add column names need to be looped\r\n      if (column.property === \"Target\")\r\n        return this.mergeAction(\"Target\", rowIndex);\r\n      if (column.property === \"Factor\")\r\n        return this.mergeAction(\"Factor\", rowIndex);\r\n    },\r\n\r\n    mergeAction(val, rowIndex) {\r\n      let _row = this.rowMergeArrs[val].rowArr[rowIndex];\r\n      let _col = _row > 0 ? 1 : 0;\r\n      return [_row, _col];\r\n    },\r\n\r\n    //Customised form merge\r\n    arraySpanMethod2({ column, rowIndex }) {\r\n      if (column.property === \"Target\")\r\n        return this.mergeAction2(\"Target\", rowIndex);\r\n      if (column.property === \"Factor\")\r\n        return this.mergeAction2(\"Factor\", rowIndex);\r\n    },\r\n\r\n    mergeAction2(val, rowIndex) {\r\n      let _row = this.rowCustomMergeArrs[val].rowArr[rowIndex];\r\n      let _col = _row > 0 ? 1 : 0;\r\n      return [_row, _col];\r\n    },\r\n\r\n    rowMergeHandle(arr, data) {\r\n      if (!Array.isArray(arr) && !arr.length) return false;\r\n      if (!Array.isArray(data) && !data.length) return false;\r\n      let needMerge = {};\r\n      arr.forEach((i) => {\r\n        needMerge[i] = {\r\n          rowArr: [],\r\n          rowMergeNum: 0,\r\n        };\r\n        data.forEach((item, index) => {\r\n          if (index === 0) {\r\n            needMerge[i].rowArr.push(1);\r\n            needMerge[i].rowMergeNum = 0;\r\n          } else {\r\n            if (item[i] === data[index - 1][i]) {\r\n              needMerge[i].rowArr[needMerge[i].rowMergeNum] += 1;\r\n              needMerge[i].rowArr.push(0);\r\n            } else {\r\n              needMerge[i].rowArr.push(1);\r\n              needMerge[i].rowMergeNum = index;\r\n            }\r\n          }\r\n        });\r\n      });\r\n      return needMerge;\r\n    },\r\n    //click event in PART2\r\n    TableCell({ row, rowIndex }) {\r\n      row.index = rowIndex;\r\n    },\r\n    cellClick(row, column) {\r\n      switch (column.label) {\r\n        case \"TargetLayer\":\r\n          this.tabClickIndex = row.index;\r\n          this.tabClickLabel = column.label;\r\n          break;\r\n        case \"FactorLayer\":\r\n          this.tabClickIndex = row.index;\r\n          this.tabClickLabel = column.label;\r\n          break;\r\n        case \"Factor\":\r\n          this.tabClickIndex = row.index;\r\n          this.tabClickLabel = column.label;\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n    },\r\n    //initialize when lose focus\r\n    inputBlur() {\r\n      this.tabClickIndex = null;\r\n      this.tabClickLabel = \"\";\r\n    },\r\n\r\n    //Buttons on the system page\r\n    AddButtonClick() {\r\n      AddJsonData(\r\n        this.selectedOption,\r\n        this.selectedSubOption,\r\n        this.CustomDataTables\r\n      );\r\n      //Mount custom system form merge\r\n      this.rowCustomMergeArrs = this.rowMergeHandle(\r\n        this.needMergeArr,\r\n        this.CustomDataTables\r\n      );\r\n    },\r\n    DeleteButtonClick() {\r\n      DeleteJsonDate(this.CustomDataTables);\r\n    },\r\n    ConfirmButtonClick() {\r\n      this.WeightDataTable = JSON.parse(JSON.stringify(this.CustomDataTables));\r\n      this.rowMergeArrs = this.rowMergeHandle(\r\n        this.needMergeArr,\r\n        this.WeightDataTable\r\n      );\r\n      console.log(this.WeightDataTable);\r\n    },\r\n    CancelButtonClick() {\r\n      this.WeightDataTable = JSON.parse(JSON.stringify(this.EcoIndex));\r\n      this.rowMergeArrs = this.rowMergeHandle(\r\n        this.needMergeArr,\r\n        this.WeightDataTable\r\n      );\r\n      console.log(this.WeightDataTable);\r\n    },\r\n\r\n    //weight setting\r\n    WeightCellClick(row) {\r\n      //get the index of the clicked row\r\n      this.WeightDataIndex = row.index;\r\n    },\r\n    \r\n    //confirm for weight and data setting\r\n    WeightDataClick2(scope) {\r\n      createJsonDataOfDatatset(\r\n        \"FactorWeight\",\r\n        this.WeightInput,\r\n        this.WeightDataTable,\r\n        this.WeightDataIndex\r\n      );\r\n      scope._self.$refs[`popover-${scope.$index}`].doClose();\r\n    },\r\n    handlePopoverShow(rowData) {\r\n      if (this.MapZone.length === 1) {\r\n        let currRegion = this.MapZone[0].name;\r\n        let currFactor = rowData.FactorLayer;\r\n        //find the data with name=currRegion use filter\r\n        let currData = Global.MapClickData.filter(\r\n          (item) => item.name === currRegion\r\n        );\r\n        currData = currData[0][currFactor];\r\n        this.DataInput = currData;\r\n        console.log(this.DataInput);\r\n      }\r\n    },\r\n    WeightDataClick3(scope) {\r\n      createJsonDataOfDatatset(\r\n        \"FactorLayerWeight\",\r\n        this.WeightInput,\r\n        this.WeightDataTable,\r\n        this.WeightDataIndex\r\n      );\r\n      createJsonDataOfDatatset(\r\n        \"FactorLayerData\",\r\n        Number(this.DataInput),\r\n        this.WeightDataTable,\r\n        this.WeightDataIndex\r\n      );\r\n      scope._self.$refs[`popover-${scope.$index}`].doClose();\r\n    },\r\n    //calculation event in PART3\r\n    CalculateClick() {\r\n      CalculateData(this.WeightDataTable);\r\n      this.ResultDataTable = this.WeightDataTable;\r\n      Global.ResultJson = this.ResultDataTable;\r\n      this.CalculationState = 1;\r\n      this.rowMergeArrs = this.rowMergeHandle(\r\n        this.needMergeArr,\r\n        this.WeightDataTable\r\n      );\r\n      console.log(this.ResultDataTable);\r\n    },\r\n    //reset event in PART3\r\n    ReCalculateClick() {\r\n      this.CalculationState = 0;\r\n      this.rowMergeArrs = this.rowMergeHandle(\r\n        this.needMergeArr,\r\n        this.WeightDataTable\r\n      );\r\n    },\r\n\r\n    handleChange() {\r\n      this.selectedSubOption = \"\";\r\n    },\r\n  },\r\n  computed: {\r\n    //for controls in PART1\r\n    optionSelects() {\r\n      let opt = this.options.find((i) => i.Two === this.selectedOption);\r\n      let opt_res = opt ? opt.Three : [];\r\n      return opt_res;\r\n    },\r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      // Responsive Design\r\n      this.tableHeight = window.innerHeight - 690;\r\n      this.tableHeight2 = window.innerHeight - 380;\r\n      window.onresize = () => {\r\n        this.tableHeight = window.innerHeight - 690;\r\n        this.tableHeight2 = window.innerHeight - 380;\r\n      };\r\n    });\r\n    this.WeightDataTable = JSON.parse(JSON.stringify(this.EcoIndex));\r\n    this.rowMergeArrs = this.rowMergeHandle(\r\n      this.needMergeArr,\r\n      this.WeightDataTable\r\n    );\r\n  },\r\n};\r\n</script>\r\n\r\n<style\r\n  scoped\r\n  src=\"../../../../assets/css/designwiz.webflow.82884a821.css\"\r\n></style>\r\n<style scoped>\r\n* {\r\n  font-family: \"Century Schoolbook\";\r\n  font-size: 17 px;\r\n}\r\n.SystemPageCol {\r\n  width: 45%;\r\n  height: 100%;\r\n  padding-top: 30px;\r\n  padding-left: 95px;\r\n}\r\n.subheading {\r\n  display: block;\r\n  font-size: 0.95em;\r\n  margin-top: 1.33em;\r\n  margin-bottom: 1.33em;\r\n  margin-left: 0;\r\n  margin-right: 0;\r\n  font-weight: bold;\r\n}\r\n.data-show-table {\r\n  height: 95%;\r\n  width: 130%;\r\n  margin-top: 1%;\r\n  margin-left: 1%;\r\n  margin-bottom: 1%;\r\n}\r\n</style>\r\n"],"mappings":";AAyTA,OAAAA,MAAA;AACA,SACAC,WAAA,EACAC,cAAA,EACAC,wBAAA,EACAC,aAAA,QACA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACA;MACAC,YAAA;MACAC,YAAA;MACAC,kBAAA;MACAC,aAAA;MAAA;MACAC,aAAA;MAAA;;MAEA;MACAC,WAAA;MACAC,YAAA;MAEAC,OAAA,EAAAd,MAAA,CAAAe,YAAA;MAEA;MACAC,OAAA,GACA;QACAC,GAAA;QACAC,KAAA;MACA,GACA;QACAD,GAAA;QACAC,KAAA;MACA,GACA;QACAD,GAAA;QACAC,KAAA;MACA,EACA;MACAC,cAAA;MACAC,iBAAA;MACA;MACAC,gBAAA;MAEA;MACAC,QAAA,GACA;QACAC,KAAA;QACAC,MAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,KAAA;QACAC,MAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,KAAA;QACAC,MAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,KAAA;QACAC,MAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,KAAA;QACAC,MAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,KAAA;QACAC,MAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,KAAA;QACAC,MAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,KAAA;QACAC,MAAA;QACAC,MAAA;QACAC,WAAA;MACA,GACA;QACAH,KAAA;QACAC,MAAA;QACAC,MAAA;QACAC,WAAA;MACA,EACA;MAEA;MACAC,eAAA;MACAC,WAAA;MACAC,SAAA;MACAC,eAAA;MACA;MACAC,OAAA;MACA;MACAC,gBAAA;MACAC,eAAA;IACA;EACA;EACAC,OAAA;IACA;IACAC,gBAAA;MAAAC,MAAA;MAAAC;IAAA;MACA;MACA,IAAAD,MAAA,CAAAE,QAAA,eACA,YAAAC,WAAA,WAAAF,QAAA;MACA,IAAAD,MAAA,CAAAE,QAAA,eACA,YAAAC,WAAA,WAAAF,QAAA;IACA;IAEAE,YAAAC,GAAA,EAAAH,QAAA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}