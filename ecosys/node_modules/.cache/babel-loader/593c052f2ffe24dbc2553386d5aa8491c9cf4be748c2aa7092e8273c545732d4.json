{"ast":null,"code":"import { latLng } from 'leaflet';\nimport { Identify } from './Identify';\nimport { responseToFeatureCollection } from '../Util';\nexport var IdentifyImage = Identify.extend({\n  setters: {\n    setMosaicRule: 'mosaicRule',\n    setRenderingRule: 'renderingRule',\n    setPixelSize: 'pixelSize',\n    returnCatalogItems: 'returnCatalogItems',\n    returnGeometry: 'returnGeometry'\n  },\n  params: {\n    returnGeometry: false\n  },\n  at: function (latlng) {\n    latlng = latLng(latlng);\n    this.params.geometry = JSON.stringify({\n      x: latlng.lng,\n      y: latlng.lat,\n      spatialReference: {\n        wkid: 4326\n      }\n    });\n    this.params.geometryType = 'esriGeometryPoint';\n    return this;\n  },\n  getMosaicRule: function () {\n    return this.params.mosaicRule;\n  },\n  getRenderingRule: function () {\n    return this.params.renderingRule;\n  },\n  getPixelSize: function () {\n    return this.params.pixelSize;\n  },\n  run: function (callback, context) {\n    return this.request(function (error, response) {\n      callback.call(context, error, response && this._responseToGeoJSON(response), response);\n    }, this);\n  },\n  // get pixel data and return as geoJSON point\n  // populate catalog items (if any)\n  // merging in any catalogItemVisibilities as a propery of each feature\n  _responseToGeoJSON: function (response) {\n    var location = response.location;\n    var catalogItems = response.catalogItems;\n    var catalogItemVisibilities = response.catalogItemVisibilities;\n    var geoJSON = {\n      pixel: {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [location.x, location.y]\n        },\n        crs: {\n          type: 'EPSG',\n          properties: {\n            code: location.spatialReference.wkid\n          }\n        },\n        properties: {\n          OBJECTID: response.objectId,\n          name: response.name,\n          value: response.value\n        },\n        id: response.objectId\n      }\n    };\n    if (response.properties && response.properties.Values) {\n      geoJSON.pixel.properties.values = response.properties.Values;\n    }\n    if (catalogItems && catalogItems.features) {\n      geoJSON.catalogItems = responseToFeatureCollection(catalogItems);\n      if (catalogItemVisibilities && catalogItemVisibilities.length === geoJSON.catalogItems.features.length) {\n        for (var i = catalogItemVisibilities.length - 1; i >= 0; i--) {\n          geoJSON.catalogItems.features[i].properties.catalogItemVisibility = catalogItemVisibilities[i];\n        }\n      }\n    }\n    return geoJSON;\n  }\n});\nexport function identifyImage(params) {\n  return new IdentifyImage(params);\n}\nexport default identifyImage;","map":{"version":3,"names":["latLng","Identify","responseToFeatureCollection","IdentifyImage","extend","setters","setMosaicRule","setRenderingRule","setPixelSize","returnCatalogItems","returnGeometry","params","at","latlng","geometry","JSON","stringify","x","lng","y","lat","spatialReference","wkid","geometryType","getMosaicRule","mosaicRule","getRenderingRule","renderingRule","getPixelSize","pixelSize","run","callback","context","request","error","response","call","_responseToGeoJSON","location","catalogItems","catalogItemVisibilities","geoJSON","pixel","type","coordinates","crs","properties","code","OBJECTID","objectId","name","value","id","Values","values","features","length","i","catalogItemVisibility","identifyImage"],"sources":["E:/Working/IP_proj/EcosystemCivi/ecosys/node_modules/esri-leaflet/src/Tasks/IdentifyImage.js"],"sourcesContent":["import { latLng } from 'leaflet';\r\nimport { Identify } from './Identify';\r\nimport { responseToFeatureCollection } from '../Util';\r\n\r\nexport var IdentifyImage = Identify.extend({\r\n  setters: {\r\n    setMosaicRule: 'mosaicRule',\r\n    setRenderingRule: 'renderingRule',\r\n    setPixelSize: 'pixelSize',\r\n    returnCatalogItems: 'returnCatalogItems',\r\n    returnGeometry: 'returnGeometry'\r\n  },\r\n\r\n  params: {\r\n    returnGeometry: false\r\n  },\r\n\r\n  at: function (latlng) {\r\n    latlng = latLng(latlng);\r\n    this.params.geometry = JSON.stringify({\r\n      x: latlng.lng,\r\n      y: latlng.lat,\r\n      spatialReference: {\r\n        wkid: 4326\r\n      }\r\n    });\r\n    this.params.geometryType = 'esriGeometryPoint';\r\n    return this;\r\n  },\r\n\r\n  getMosaicRule: function () {\r\n    return this.params.mosaicRule;\r\n  },\r\n\r\n  getRenderingRule: function () {\r\n    return this.params.renderingRule;\r\n  },\r\n\r\n  getPixelSize: function () {\r\n    return this.params.pixelSize;\r\n  },\r\n\r\n  run: function (callback, context) {\r\n    return this.request(function (error, response) {\r\n      callback.call(context, error, (response && this._responseToGeoJSON(response)), response);\r\n    }, this);\r\n  },\r\n\r\n  // get pixel data and return as geoJSON point\r\n  // populate catalog items (if any)\r\n  // merging in any catalogItemVisibilities as a propery of each feature\r\n  _responseToGeoJSON: function (response) {\r\n    var location = response.location;\r\n    var catalogItems = response.catalogItems;\r\n    var catalogItemVisibilities = response.catalogItemVisibilities;\r\n    var geoJSON = {\r\n      pixel: {\r\n        type: 'Feature',\r\n        geometry: {\r\n          type: 'Point',\r\n          coordinates: [location.x, location.y]\r\n        },\r\n        crs: {\r\n          type: 'EPSG',\r\n          properties: {\r\n            code: location.spatialReference.wkid\r\n          }\r\n        },\r\n        properties: {\r\n          OBJECTID: response.objectId,\r\n          name: response.name,\r\n          value: response.value\r\n        },\r\n        id: response.objectId\r\n      }\r\n    };\r\n\r\n    if (response.properties && response.properties.Values) {\r\n      geoJSON.pixel.properties.values = response.properties.Values;\r\n    }\r\n\r\n    if (catalogItems && catalogItems.features) {\r\n      geoJSON.catalogItems = responseToFeatureCollection(catalogItems);\r\n      if (catalogItemVisibilities && catalogItemVisibilities.length === geoJSON.catalogItems.features.length) {\r\n        for (var i = catalogItemVisibilities.length - 1; i >= 0; i--) {\r\n          geoJSON.catalogItems.features[i].properties.catalogItemVisibility = catalogItemVisibilities[i];\r\n        }\r\n      }\r\n    }\r\n    return geoJSON;\r\n  }\r\n\r\n});\r\n\r\nexport function identifyImage (params) {\r\n  return new IdentifyImage(params);\r\n}\r\n\r\nexport default identifyImage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}