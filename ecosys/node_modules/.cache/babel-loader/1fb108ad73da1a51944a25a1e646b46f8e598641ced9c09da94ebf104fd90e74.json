{"ast":null,"code":"import { Task } from './Task';\nimport { responseToFeatureCollection } from '../Util';\nexport var Find = Task.extend({\n  setters: {\n    // method name > param name\n    contains: 'contains',\n    text: 'searchText',\n    fields: 'searchFields',\n    // denote an array or single string\n    spatialReference: 'sr',\n    sr: 'sr',\n    layers: 'layers',\n    returnGeometry: 'returnGeometry',\n    maxAllowableOffset: 'maxAllowableOffset',\n    precision: 'geometryPrecision',\n    dynamicLayers: 'dynamicLayers',\n    returnZ: 'returnZ',\n    returnM: 'returnM',\n    gdbVersion: 'gdbVersion',\n    // skipped implementing this (for now) because the REST service implementation isnt consistent between operations\n    // 'transform': 'datumTransformations',\n    token: 'token'\n  },\n  path: 'find',\n  params: {\n    sr: 4326,\n    contains: true,\n    returnGeometry: true,\n    returnZ: true,\n    returnM: false\n  },\n  layerDefs: function (id, where) {\n    this.params.layerDefs = this.params.layerDefs ? this.params.layerDefs + ';' : '';\n    this.params.layerDefs += [id, where].join(':');\n    return this;\n  },\n  simplify: function (map, factor) {\n    var mapWidth = Math.abs(map.getBounds().getWest() - map.getBounds().getEast());\n    this.params.maxAllowableOffset = mapWidth / map.getSize().y * factor;\n    return this;\n  },\n  run: function (callback, context) {\n    return this.request(function (error, response) {\n      callback.call(context, error, response && responseToFeatureCollection(response), response);\n    }, context);\n  }\n});\nexport function find(options) {\n  return new Find(options);\n}\nexport default find;","map":{"version":3,"names":["Task","responseToFeatureCollection","Find","extend","setters","contains","text","fields","spatialReference","sr","layers","returnGeometry","maxAllowableOffset","precision","dynamicLayers","returnZ","returnM","gdbVersion","token","path","params","layerDefs","id","where","join","simplify","map","factor","mapWidth","Math","abs","getBounds","getWest","getEast","getSize","y","run","callback","context","request","error","response","call","find","options"],"sources":["E:/Working/IP_proj/EcosystemCivi/ecosys/node_modules/esri-leaflet/src/Tasks/Find.js"],"sourcesContent":["import { Task } from './Task';\r\nimport { responseToFeatureCollection } from '../Util';\r\n\r\nexport var Find = Task.extend({\r\n  setters: {\r\n    // method name > param name\r\n    contains: 'contains',\r\n    text: 'searchText',\r\n    fields: 'searchFields', // denote an array or single string\r\n    spatialReference: 'sr',\r\n    sr: 'sr',\r\n    layers: 'layers',\r\n    returnGeometry: 'returnGeometry',\r\n    maxAllowableOffset: 'maxAllowableOffset',\r\n    precision: 'geometryPrecision',\r\n    dynamicLayers: 'dynamicLayers',\r\n    returnZ: 'returnZ',\r\n    returnM: 'returnM',\r\n    gdbVersion: 'gdbVersion',\r\n    // skipped implementing this (for now) because the REST service implementation isnt consistent between operations\r\n    // 'transform': 'datumTransformations',\r\n    token: 'token'\r\n  },\r\n\r\n  path: 'find',\r\n\r\n  params: {\r\n    sr: 4326,\r\n    contains: true,\r\n    returnGeometry: true,\r\n    returnZ: true,\r\n    returnM: false\r\n  },\r\n\r\n  layerDefs: function (id, where) {\r\n    this.params.layerDefs = (this.params.layerDefs) ? this.params.layerDefs + ';' : '';\r\n    this.params.layerDefs += ([id, where]).join(':');\r\n    return this;\r\n  },\r\n\r\n  simplify: function (map, factor) {\r\n    var mapWidth = Math.abs(map.getBounds().getWest() - map.getBounds().getEast());\r\n    this.params.maxAllowableOffset = (mapWidth / map.getSize().y) * factor;\r\n    return this;\r\n  },\r\n\r\n  run: function (callback, context) {\r\n    return this.request(function (error, response) {\r\n      callback.call(context, error, (response && responseToFeatureCollection(response)), response);\r\n    }, context);\r\n  }\r\n});\r\n\r\nexport function find (options) {\r\n  return new Find(options);\r\n}\r\n\r\nexport default find;\r\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,QAAQ;AAC7B,SAASC,2BAA2B,QAAQ,SAAS;AAErD,OAAO,IAAIC,IAAI,GAAGF,IAAI,CAACG,MAAM,CAAC;EAC5BC,OAAO,EAAE;IACP;IACAC,QAAQ,EAAE,UAAU;IACpBC,IAAI,EAAE,YAAY;IAClBC,MAAM,EAAE,cAAc;IAAE;IACxBC,gBAAgB,EAAE,IAAI;IACtBC,EAAE,EAAE,IAAI;IACRC,MAAM,EAAE,QAAQ;IAChBC,cAAc,EAAE,gBAAgB;IAChCC,kBAAkB,EAAE,oBAAoB;IACxCC,SAAS,EAAE,mBAAmB;IAC9BC,aAAa,EAAE,eAAe;IAC9BC,OAAO,EAAE,SAAS;IAClBC,OAAO,EAAE,SAAS;IAClBC,UAAU,EAAE,YAAY;IACxB;IACA;IACAC,KAAK,EAAE;EACT,CAAC;EAEDC,IAAI,EAAE,MAAM;EAEZC,MAAM,EAAE;IACNX,EAAE,EAAE,IAAI;IACRJ,QAAQ,EAAE,IAAI;IACdM,cAAc,EAAE,IAAI;IACpBI,OAAO,EAAE,IAAI;IACbC,OAAO,EAAE;EACX,CAAC;EAEDK,SAAS,EAAE,SAAAA,CAAUC,EAAE,EAAEC,KAAK,EAAE;IAC9B,IAAI,CAACH,MAAM,CAACC,SAAS,GAAI,IAAI,CAACD,MAAM,CAACC,SAAS,GAAI,IAAI,CAACD,MAAM,CAACC,SAAS,GAAG,GAAG,GAAG,EAAE;IAClF,IAAI,CAACD,MAAM,CAACC,SAAS,IAAK,CAACC,EAAE,EAAEC,KAAK,CAAC,CAAEC,IAAI,CAAC,GAAG,CAAC;IAChD,OAAO,IAAI;EACb,CAAC;EAEDC,QAAQ,EAAE,SAAAA,CAAUC,GAAG,EAAEC,MAAM,EAAE;IAC/B,IAAIC,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACJ,GAAG,CAACK,SAAS,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,GAAGN,GAAG,CAACK,SAAS,CAAC,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC;IAC9E,IAAI,CAACb,MAAM,CAACR,kBAAkB,GAAIgB,QAAQ,GAAGF,GAAG,CAACQ,OAAO,CAAC,CAAC,CAACC,CAAC,GAAIR,MAAM;IACtE,OAAO,IAAI;EACb,CAAC;EAEDS,GAAG,EAAE,SAAAA,CAAUC,QAAQ,EAAEC,OAAO,EAAE;IAChC,OAAO,IAAI,CAACC,OAAO,CAAC,UAAUC,KAAK,EAAEC,QAAQ,EAAE;MAC7CJ,QAAQ,CAACK,IAAI,CAACJ,OAAO,EAAEE,KAAK,EAAGC,QAAQ,IAAIxC,2BAA2B,CAACwC,QAAQ,CAAC,EAAGA,QAAQ,CAAC;IAC9F,CAAC,EAAEH,OAAO,CAAC;EACb;AACF,CAAC,CAAC;AAEF,OAAO,SAASK,IAAIA,CAAEC,OAAO,EAAE;EAC7B,OAAO,IAAI1C,IAAI,CAAC0C,OAAO,CAAC;AAC1B;AAEA,eAAeD,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}