{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Global from \"../../views/Globel/Global\";\nimport { SplitJson } from \"../../js/getData\";\nimport { AddJsonData, DeleteJsonDate, createJsonDataOfDatatset, CalculateData } from \"../../js/optionData\";\nexport default {\n  name: \"SystemTable\",\n  data() {\n    return {\n      //体系设计页面需要的数据\n      needMergeArr: [\"Target\", \"Index\", \"Factor\"],\n      rowMergeArrs: {},\n      rowCustomMergeArrs: {},\n      tabClickIndex: null,\n      // 点击的单元格\n      tabClickLabel: \"\",\n      // 当前点击的列名\n\n      //表格自适应浏览器高度\n      tableHeight: \"\",\n      tableHeight2: \"\",\n      //获取全局变量中的数据\n      MapZone: Global.MapClickName,\n      //选择体系页面\n      ListOne: [],\n      OneReturn: \"\",\n      ListTwo: [],\n      TwoReturn: \"\",\n      ListThree: [],\n      ThreeReturn: \"\",\n      //返回的JSON数据表格\n      CustomDataTables: [],\n      //默认体系设置\n      SDGsIndex: [{\n        index: 0,\n        Target: \"Water\",\n        // Index: \"资源承载\",\n        // Factor: \"土地资源承载力\",\n        FactorLayer: \"Area of Water\"\n      }, {\n        index: 1,\n        Target: \"Water\",\n        FactorLayer: \"Density·of river\"\n      }, {\n        index: 2,\n        Target: \"Water\",\n        FactorLayer: \"Snow and Ice\"\n      }, {\n        index: 3,\n        Target: \"Human Activities\",\n        FactorLayer: \"Area of sealed land\"\n      }, {\n        index: 4,\n        Target: \"Human Activities\",\n        FactorLayer: \"Non-vegetated·unsealed surfaces\"\n      }, {\n        index: 5,\n        Target: \"Natural Land Cover\",\n        FactorLayer: \"Woody\"\n      }, {\n        index: 6,\n        Target: \"Natural Land Cover\",\n        FactorLayer: \"Herbaceous permanent\"\n      }, {\n        index: 7,\n        Target: \"Natural Land Cover\",\n        FactorLayer: \"Herbaceous periodically\"\n      }, {\n        index: 8,\n        Target: \"Natural Land Cover\",\n        FactorLayer: \"Reeds\"\n      }],\n      //设置权重页面输入框所需要的数据\n      WeightDataIndex: \"\",\n      WeightInput: \"\",\n      DataInput: \"\",\n      WeightDataTable: \"\",\n      //权重计算页面\n      visible: false,\n      //判断页面计算状态\n      CalculationState: 0,\n      //最后结果数据\n      ResultDataTable: \"\"\n    };\n  },\n  methods: {\n    // 权重页面合拼单元格方法\n    arraySpanMethod({\n      column,\n      rowIndex\n    }) {\n      // 把需要循环的列名加入\n      if (column.property === \"Target\") return this.mergeAction(\"Target\", rowIndex);\n      if (column.property === \"Index\") return this.mergeAction(\"Index\", rowIndex);\n      if (column.property === \"Factor\") return this.mergeAction(\"Factor\", rowIndex);\n    },\n    mergeAction(val, rowIndex) {\n      let _row = this.rowMergeArrs[val].rowArr[rowIndex];\n      let _col = _row > 0 ? 1 : 0;\n      return [_row, _col];\n    },\n    //自定义界面表格合拼\n    arraySpanMethod2({\n      column,\n      rowIndex\n    }) {\n      // 把需要循环的列名加入\n      if (column.property === \"Target\") return this.mergeAction2(\"Target\", rowIndex);\n      if (column.property === \"Index\") return this.mergeAction2(\"Index\", rowIndex);\n      if (column.property === \"Factor\") return this.mergeAction2(\"Factor\", rowIndex);\n    },\n    mergeAction2(val, rowIndex) {\n      let _row = this.rowCustomMergeArrs[val].rowArr[rowIndex];\n      let _col = _row > 0 ? 1 : 0;\n      return [_row, _col];\n    },\n    rowMergeHandle(arr, data) {\n      if (!Array.isArray(arr) && !arr.length) return false;\n      if (!Array.isArray(data) && !data.length) return false;\n      let needMerge = {};\n      arr.forEach(i => {\n        needMerge[i] = {\n          rowArr: [],\n          rowMergeNum: 0\n        };\n        data.forEach((item, index) => {\n          if (index === 0) {\n            needMerge[i].rowArr.push(1);\n            needMerge[i].rowMergeNum = 0;\n          } else {\n            if (item[i] === data[index - 1][i]) {\n              needMerge[i].rowArr[needMerge[i].rowMergeNum] += 1;\n              needMerge[i].rowArr.push(0);\n            } else {\n              needMerge[i].rowArr.push(1);\n              needMerge[i].rowMergeNum = index;\n            }\n          }\n        });\n      });\n      return needMerge;\n    },\n    //现有体系页面单元格点击事件\n    TableCell({\n      row,\n      rowIndex\n    }) {\n      row.index = rowIndex;\n    },\n    cellClick(row, column) {\n      switch (column.label) {\n        case \"目标层\":\n          this.tabClickIndex = row.index;\n          this.tabClickLabel = column.label;\n          break;\n        case \"指标层\":\n          this.tabClickIndex = row.index;\n          this.tabClickLabel = column.label;\n          break;\n        case \"因子层\":\n          this.tabClickIndex = row.index;\n          this.tabClickLabel = column.label;\n          break;\n        case \"因子\":\n          this.tabClickIndex = row.index;\n          this.tabClickLabel = column.label;\n          break;\n        default:\n          return;\n      }\n    },\n    //失去焦点初始化\n    inputBlur() {\n      this.tabClickIndex = null;\n      this.tabClickLabel = \"\";\n    },\n    //自定义体系页面的四个按钮\n    AddButtonClick() {\n      AddJsonData(this.OneReturn, this.TwoReturn, this.ThreeReturn, this.CustomDataTables);\n      //挂载自定义体系表格合拼\n      this.rowCustomMergeArrs = this.rowMergeHandle(this.needMergeArr, this.CustomDataTables);\n    },\n    DeleteButtonClick() {\n      DeleteJsonDate(this.CustomDataTables);\n    },\n    ConfirmButtonClick() {\n      this.WeightDataTable = JSON.parse(JSON.stringify(this.CustomDataTables));\n      this.rowMergeArrs = this.rowMergeHandle(this.needMergeArr, this.WeightDataTable);\n      console.log(this.WeightDataTable);\n    },\n    CancelButtonClick() {\n      this.WeightDataTable = JSON.parse(JSON.stringify(this.SDGsIndex));\n      this.rowMergeArrs = this.rowMergeHandle(this.needMergeArr, this.WeightDataTable);\n      console.log(this.WeightDataTable);\n    },\n    //权重设置页面单元格点击事件\n    WeightCellClick(row) {\n      //点击自定义单元格把第几列数据传入\n      this.WeightDataIndex = row.index;\n    },\n    //权重设置页面通过点击确定为其设置权重和数据\n    WeightDataClick1(scope) {\n      createJsonDataOfDatatset(\"IndexWeight\", this.WeightInput, this.WeightDataTable, this.WeightDataIndex);\n      scope._self.$refs[`popover-${scope.$index}`].doClose();\n    },\n    WeightDataClick2(scope) {\n      createJsonDataOfDatatset(\"FactorWeight\", this.WeightInput, this.WeightDataTable, this.WeightDataIndex);\n      scope._self.$refs[`popover-${scope.$index}`].doClose();\n    },\n    WeightDataClick3(scope) {\n      createJsonDataOfDatatset(\"FactorLayerWeight\", this.WeightInput, this.WeightDataTable, this.WeightDataIndex);\n      createJsonDataOfDatatset(\"FactorLayerData\", Number(this.DataInput), this.WeightDataTable, this.WeightDataIndex);\n      scope._self.$refs[`popover-${scope.$index}`].doClose();\n    },\n    //权重设置页面计算事件\n    CalculateClick() {\n      CalculateData(this.WeightDataTable);\n      this.ResultDataTable = this.WeightDataTable;\n      Global.ResultJson = this.ResultDataTable;\n      this.CalculationState = 1;\n      this.rowMergeArrs = this.rowMergeHandle(this.needMergeArr, this.WeightDataTable);\n    },\n    //权重设置页面重置事件\n    ReCalculateClick() {\n      this.CalculationState = 0;\n      this.rowMergeArrs = this.rowMergeHandle(this.needMergeArr, this.WeightDataTable);\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      // 根据浏览器高度设置初始高度\n      this.tableHeight = window.innerHeight - 690;\n      this.tableHeight2 = window.innerHeight - 380;\n      // 监听浏览器高度变化，改变表格高度\n      window.onresize = () => {\n        this.tableHeight = window.innerHeight - 690;\n        this.tableHeight2 = window.innerHeight - 380;\n      };\n    });\n    this.WeightDataTable = JSON.parse(JSON.stringify(this.SDGsIndex));\n    this.rowMergeArrs = this.rowMergeHandle(this.needMergeArr, this.WeightDataTable);\n    this.ListOne = SplitJson(\"维度\", \"目标\", \"领域\", \"一级指标\", \"一级目标\");\n    this.ListTwo = SplitJson(\"具体目标\", \"具体目标\", \"指数\", \"二级指标\", \"二级指数\");\n    this.ListThree = SplitJson(\"评价指标\", \"具体指标\", \"指标\", \"评价因子\", \"评价因子\");\n  }\n};","map":{"version":3,"names":["Global","SplitJson","AddJsonData","DeleteJsonDate","createJsonDataOfDatatset","CalculateData","name","data","needMergeArr","rowMergeArrs","rowCustomMergeArrs","tabClickIndex","tabClickLabel","tableHeight","tableHeight2","MapZone","MapClickName","ListOne","OneReturn","ListTwo","TwoReturn","ListThree","ThreeReturn","CustomDataTables","SDGsIndex","index","Target","FactorLayer","WeightDataIndex","WeightInput","DataInput","WeightDataTable","visible","CalculationState","ResultDataTable","methods","arraySpanMethod","column","rowIndex","property","mergeAction","val","_row","rowArr","_col","arraySpanMethod2","mergeAction2","rowMergeHandle","arr","Array","isArray","length","needMerge","forEach","i","rowMergeNum","item","push","TableCell","row","cellClick","label","inputBlur","AddButtonClick","DeleteButtonClick","ConfirmButtonClick","JSON","parse","stringify","console","log","CancelButtonClick","WeightCellClick","WeightDataClick1","scope","_self","$refs","$index","doClose","WeightDataClick2","WeightDataClick3","Number","CalculateClick","ResultJson","ReCalculateClick","mounted","$nextTick","window","innerHeight","onresize"],"sources":["src/views/EvaluateAnalyze/views/SystemPageComponent/SystemTable.vue"],"sourcesContent":["<template>\r\n  <el-container style=\"width: 100%; height: 100%; background-color: #ffffff\">\r\n    <el-row style=\"text-align: center\">\r\n      <div class=\"heading-2\">Natural Environment Assessment</div>\r\n    </el-row>\r\n    <el-row style=\"width: 100%; height: 90%\">\r\n      <el-col :offset=\"1\" class=\"SystemPageCol\">\r\n        <el-card\r\n          shadow=\"hover\"\r\n          style=\"height: 100%; width: 90%; text-align: center\"\r\n        >\r\n          <h4 style=\"text-align: center; padding-top: 10px\">\r\n            Indicator system\r\n          </h4>\r\n          <div class=\"subheading\" style=\"text-align: center\">\r\n            Extent:\r\n            <span v-if=\"this.MapZone.length === 0\">\r\n              <div>\r\n                The extent is empty, select the extent in the previous step\r\n              </div>\r\n            </span>\r\n            <span v-else>\r\n              {{ this.MapZone }}\r\n            </span>\r\n          </div>\r\n\r\n          <el-row style=\"text-align: center\">\r\n            <span> Indicator layer:</span>\r\n            <el-select v-model=\"OneReturn\" placeholder=\"Please select\">\r\n              <el-option\r\n                v-for=\"item in ListOne\"\r\n                :key=\"item.一级目标\"\r\n                :label=\"item.一级目标\"\r\n                :value=\"item.一级目标\"\r\n              >\r\n              </el-option>\r\n            </el-select>\r\n          </el-row>\r\n          <el-row style=\"text-align: center; padding: 10px\">\r\n            <span>Second level：</span>\r\n            <el-select\r\n              v-model=\"TwoReturn\"\r\n              placeholder=\"Select the indictor layer\"\r\n            >\r\n              <el-option\r\n                v-for=\"item in ListTwo\"\r\n                :key=\"item.二级指数\"\r\n                :label=\"item.二级指数\"\r\n                :value=\"item.二级指数\"\r\n              >\r\n              </el-option>\r\n            </el-select>\r\n          </el-row>\r\n          <el-row style=\"text-align: center\">\r\n            <span>Factor layer</span>\r\n            <el-select v-model=\"ThreeReturn\" placeholder=\"Please select\">\r\n              <el-option\r\n                v-for=\"item in ListThree\"\r\n                :key=\"item.评价因子\"\r\n                :label=\"item.评价因子\"\r\n                :value=\"item.评价因子\"\r\n              >\r\n              </el-option>\r\n            </el-select>\r\n          </el-row>\r\n          <el-row style=\"text-align: center; padding: 10px\">\r\n            <el-button\r\n              @click=\"AddButtonClick\"\r\n              type=\"primary\"\r\n              style=\"color: #ffffff\"\r\n              >Add</el-button\r\n            >\r\n            <el-button\r\n              @click=\"DeleteButtonClick\"\r\n              type=\"danger\"\r\n              style=\"color: #ffffff\"\r\n              >Delete</el-button\r\n            >\r\n          </el-row>\r\n          <el-row>\r\n            <h4 style=\"text-align: center\">Indicator System</h4>\r\n            <el-table\r\n              class=\"tableStyle data-show-table\"\r\n              :data=\"CustomDataTables\"\r\n              :span-method=\"arraySpanMethod2\"\r\n              :row-class-name=\"TableCell\"\r\n              border\r\n              :max-height=\"tableHeight\"\r\n              @cell-click=\"cellClick\"\r\n            >\r\n              <el-table-column prop=\"Target\" label=\"Indicator Layer\">\r\n                <template slot-scope=\"scope\">\r\n                  <span\r\n                    v-if=\"\r\n                      scope.row.index === tabClickIndex &&\r\n                      tabClickLabel === '目标层'\r\n                    \"\r\n                  >\r\n                    <el-input\r\n                      v-model=\"scope.row.Target\"\r\n                      maxlength=\"300\"\r\n                      placeholder=\"请输入目标层\"\r\n                      size=\"mini\"\r\n                      @blur=\"inputBlur\"\r\n                    />\r\n                  </span>\r\n                  <span v-else>{{ scope.row.Target }}</span>\r\n                </template>\r\n              </el-table-column>\r\n              <!-- <el-table-column prop=\"Index\" label=\"指标层\">\r\n                <template slot-scope=\"scope\">\r\n                  <span\r\n                    v-if=\"\r\n                      scope.row.index === tabClickIndex &&\r\n                      tabClickLabel === '指标层'\r\n                    \"\r\n                  >\r\n                    <el-input\r\n                      v-model=\"scope.row.Index\"\r\n                      maxlength=\"300\"\r\n                      placeholder=\"请输入指标层\"\r\n                      size=\"mini\"\r\n                      @blur=\"inputBlur\"\r\n                    />\r\n                  </span>\r\n                  <span v-else>{{ scope.row.Index }}</span>\r\n                </template>\r\n              </el-table-column> -->\r\n              <el-table-column prop=\"Factor\" label=\"Factor Layer\">\r\n                <template slot-scope=\"scope\">\r\n                  <span\r\n                    v-if=\"\r\n                      scope.row.index === tabClickIndex &&\r\n                      tabClickLabel === '因子层'\r\n                    \"\r\n                  >\r\n                    <el-input\r\n                      v-model=\"scope.row.Factor\"\r\n                      maxlength=\"300\"\r\n                      placeholder=\"请输入因子层\"\r\n                      size=\"mini\"\r\n                      @blur=\"inputBlur\"\r\n                    />\r\n                  </span>\r\n                  <span v-else>{{ scope.row.Factor }}</span>\r\n                </template>\r\n              </el-table-column>\r\n              <!-- <el-table-column prop=\"FactorLayer\" label=\"因子\">\r\n                <template slot-scope=\"scope\">\r\n                  <span\r\n                    v-if=\"\r\n                      scope.row.index === tabClickIndex &&\r\n                      tabClickLabel === '因子'\r\n                    \"\r\n                  >\r\n                    <el-input\r\n                      v-model=\"scope.row.FactorLayer\"\r\n                      maxlength=\"300\"\r\n                      placeholder=\"请输入因子\"\r\n                      size=\"mini\"\r\n                      @blur=\"inputBlur\"\r\n                    />\r\n                  </span>\r\n                  <span v-else>{{ scope.row.FactorLayer }}</span>\r\n                </template>\r\n              </el-table-column> -->\r\n            </el-table>\r\n          </el-row>\r\n          <el-row style=\"text-align: center; padding: 10px\">\r\n            <el-button\r\n              @click=\"ConfirmButtonClick\"\r\n              type=\"primary\"\r\n              style=\"color: #ffffff\"\r\n              >Yes</el-button\r\n            >\r\n            <el-button\r\n              @click=\"CancelButtonClick\"\r\n              type=\"danger\"\r\n              style=\"color: #ffffff\"\r\n              >Cancel</el-button\r\n            >\r\n          </el-row>\r\n        </el-card>\r\n      </el-col>\r\n      <el-col class=\"SystemPageCol\">\r\n        <el-card\r\n          shadow=\"hover\"\r\n          style=\"height: 100%; width: 90%; text-align: center\"\r\n        >\r\n          <h4 style=\"text-align: center\">Analyze</h4>\r\n          <div style=\"width: 100%; height: 100%\" v-if=\"CalculationState === 1\">\r\n            <el-table\r\n              class=\"tableStyle data-show-table\"\r\n              :data=\"ResultDataTable\"\r\n              :span-method=\"arraySpanMethod\"\r\n              :max-height=\"tableHeight2\"\r\n              border\r\n            >\r\n              <el-table-column prop=\"Target\" label=\"Indicator Layer\">\r\n                <template slot-scope=\"scope\">\r\n                  <div>{{ scope.row.Target }}</div>\r\n                  <div>Score：{{ scope.row.TargetData }}</div>\r\n                </template>\r\n              </el-table-column>\r\n              <!-- <el-table-column prop=\"Index\" label=\"指标层\">\r\n                <template slot-scope=\"scope\">\r\n                  <div>{{ scope.row.Index }}</div>\r\n                  <div>得分：{{ scope.row.IndexData }}</div>\r\n                </template>\r\n              </el-table-column> -->\r\n              <el-table-column prop=\"Factor\" label=\"Factor Layer\">\r\n                <template slot-scope=\"scope\">\r\n                  <div>{{ scope.row.Factor }}</div>\r\n                  <div>Score：{{ scope.row.FactorData }}</div>\r\n                </template>\r\n              </el-table-column>\r\n              <!-- <el-table-column prop=\"FactorLayer\" label=\"因子\">\r\n                <template slot-scope=\"scope\">\r\n                  <div>{{ scope.row.FactorLayer }}</div>\r\n                  <div>得分：{{ scope.row.FactorLayerData }}</div>\r\n                </template>\r\n              </el-table-column> -->\r\n            </el-table>\r\n          </div>\r\n          <div style=\"width: 100%; height: 100%\" v-else>\r\n            <el-table\r\n              class=\"tableStyle data-show-table\"\r\n              :data=\"WeightDataTable\"\r\n              :span-method=\"arraySpanMethod\"\r\n              :max-height=\"tableHeight2\"\r\n              @cell-click=\"WeightCellClick\"\r\n              border\r\n            >\r\n              <el-table-column prop=\"Target\" label=\"Indicator Layer\">\r\n                <template slot-scope=\"scope\">\r\n                  <div>{{ scope.row.Target }}</div>\r\n                </template>\r\n              </el-table-column>\r\n              <!-- <el-table-column prop=\"Index\" label=\"指标层\">\r\n                <template slot-scope=\"scope\">\r\n                  <el-popover\r\n                    trigger=\"click\"\r\n                    placement=\"top\"\r\n                    :ref=\"`popover-${scope.$index}`\"\r\n                  >\r\n                    <p>\r\n                      权重:{{ scope.row.IndexWeight }}<br />\r\n                      <el-input\r\n                        v-model=\"WeightInput\"\r\n                        placeholder=\"请输入权重\"\r\n                      ></el-input>\r\n                    </p>\r\n                    <el-button\r\n                      type=\"primary\"\r\n                      size=\"mini\"\r\n                      @click=\"WeightDataClick1(scope)\"\r\n                      >确定</el-button\r\n                    >\r\n                    <div slot=\"reference\">\r\n                      <div>{{ scope.row.Index }}</div>\r\n                    </div>\r\n                  </el-popover>\r\n                </template>\r\n              </el-table-column> -->\r\n              <el-table-column prop=\"Factor\" label=\"Factor Layer\">\r\n                <template slot-scope=\"scope\">\r\n                  <el-popover\r\n                    trigger=\"click\"\r\n                    placement=\"top\"\r\n                    :ref=\"`popover-${scope.$index}`\"\r\n                  >\r\n                    <p>\r\n                      Weight:{{ scope.row.FactorWeight }}<br />\r\n                      <el-input\r\n                        v-model=\"WeightInput\"\r\n                        placeholder=\"Please Input the weight\"\r\n                      ></el-input>\r\n                    </p>\r\n                    <el-button\r\n                      type=\"primary\"\r\n                      size=\"mini\"\r\n                      @click=\"WeightDataClick2(scope)\"\r\n                      >Yes</el-button\r\n                    >\r\n                    <div slot=\"reference\">\r\n                      <div>{{ scope.row.Factor }}</div>\r\n                    </div>\r\n                  </el-popover>\r\n                </template>\r\n              </el-table-column>\r\n              <!-- <el-table-column prop=\"FactorLayer\" label=\"因子\">\r\n                <template slot-scope=\"scope\">\r\n                  <el-popover\r\n                    trigger=\"click\"\r\n                    placement=\"top\"\r\n                    :ref=\"`popover-${scope.$index}`\"\r\n                  >\r\n                    <p>\r\n                      权重:{{ scope.row.FactorLayerWeight }}<br />\r\n                      <el-input\r\n                        v-model=\"WeightInput\"\r\n                        placeholder=\"请输入权重\"\r\n                      ></el-input>\r\n                    </p>\r\n                    <p>\r\n                      数据:{{ scope.row.FactorLayerData }}<br />\r\n                      <el-input\r\n                        v-model=\"DataInput\"\r\n                        placeholder=\"请输入数据\"\r\n                      ></el-input>\r\n                    </p>\r\n                    <el-button\r\n                      type=\"primary\"\r\n                      size=\"mini\"\r\n                      @click=\"WeightDataClick3(scope)\"\r\n                      >确定</el-button\r\n                    >\r\n                    <div slot=\"reference\">\r\n                      <div>{{ scope.row.FactorLayer }}</div>\r\n                    </div>\r\n                  </el-popover>\r\n                </template>\r\n              </el-table-column> -->\r\n            </el-table>\r\n          </div>\r\n          <el-row style=\"text-align: center; padding-top: 10px\">\r\n            <el-button\r\n              @click=\"CalculateClick()\"\r\n              type=\"primary\"\r\n              round\r\n              style=\"color: #ffffff\"\r\n              >Calculate</el-button\r\n            >\r\n            <el-button\r\n              @click=\"ReCalculateClick()\"\r\n              type=\"danger\"\r\n              round\r\n              style=\"color: #ffffff\"\r\n              >Reset</el-button\r\n            >\r\n          </el-row>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n  </el-container>\r\n</template>\r\n\r\n<script>\r\nimport Global from \"../../views/Globel/Global\";\r\nimport { SplitJson } from \"../../js/getData\";\r\nimport {\r\n  AddJsonData,\r\n  DeleteJsonDate,\r\n  createJsonDataOfDatatset,\r\n  CalculateData,\r\n} from \"../../js/optionData\";\r\nexport default {\r\n  name: \"SystemTable\",\r\n  data() {\r\n    return {\r\n      //体系设计页面需要的数据\r\n      needMergeArr: [\"Target\", \"Index\", \"Factor\"],\r\n      rowMergeArrs: {},\r\n      rowCustomMergeArrs: {},\r\n      tabClickIndex: null, // 点击的单元格\r\n      tabClickLabel: \"\", // 当前点击的列名\r\n\r\n      //表格自适应浏览器高度\r\n      tableHeight: \"\",\r\n      tableHeight2: \"\",\r\n\r\n      //获取全局变量中的数据\r\n      MapZone: Global.MapClickName,\r\n      //选择体系页面\r\n      ListOne: [],\r\n      OneReturn: \"\",\r\n      ListTwo: [],\r\n      TwoReturn: \"\",\r\n      ListThree: [],\r\n      ThreeReturn: \"\",\r\n      //返回的JSON数据表格\r\n      CustomDataTables: [],\r\n\r\n      //默认体系设置\r\n      SDGsIndex: [\r\n        {\r\n          index: 0,\r\n          Target: \"Water\",\r\n          // Index: \"资源承载\",\r\n          // Factor: \"土地资源承载力\",\r\n          FactorLayer: \"Area of Water\",\r\n        },\r\n        {\r\n          index: 1,\r\n          Target: \"Water\",\r\n          FactorLayer: \"Density·of river\",\r\n        },\r\n        {\r\n          index: 2,\r\n          Target: \"Water\",\r\n          FactorLayer: \"Snow and Ice\",\r\n        },\r\n        {\r\n          index: 3,\r\n          Target: \"Human Activities\",\r\n          FactorLayer: \"Area of sealed land\",\r\n        },\r\n        {\r\n          index: 4,\r\n          Target: \"Human Activities\",\r\n          FactorLayer: \"Non-vegetated·unsealed surfaces\",\r\n        },\r\n        {\r\n          index: 5,\r\n          Target: \"Natural Land Cover\",\r\n          FactorLayer: \"Woody\",\r\n        },\r\n        {\r\n          index: 6,\r\n          Target: \"Natural Land Cover\",\r\n          FactorLayer: \"Herbaceous permanent\",\r\n        },\r\n        {\r\n          index: 7,\r\n          Target: \"Natural Land Cover\",\r\n          FactorLayer: \"Herbaceous periodically\",\r\n        },\r\n        {\r\n          index: 8,\r\n          Target: \"Natural Land Cover\",\r\n          FactorLayer: \"Reeds\",\r\n        },\r\n      ],\r\n\r\n      //设置权重页面输入框所需要的数据\r\n      WeightDataIndex: \"\",\r\n      WeightInput: \"\",\r\n      DataInput: \"\",\r\n      WeightDataTable: \"\",\r\n      //权重计算页面\r\n      visible: false,\r\n      //判断页面计算状态\r\n      CalculationState: 0,\r\n      //最后结果数据\r\n      ResultDataTable: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    // 权重页面合拼单元格方法\r\n    arraySpanMethod({ column, rowIndex }) {\r\n      // 把需要循环的列名加入\r\n      if (column.property === \"Target\")\r\n        return this.mergeAction(\"Target\", rowIndex);\r\n      if (column.property === \"Index\")\r\n        return this.mergeAction(\"Index\", rowIndex);\r\n      if (column.property === \"Factor\")\r\n        return this.mergeAction(\"Factor\", rowIndex);\r\n    },\r\n\r\n    mergeAction(val, rowIndex) {\r\n      let _row = this.rowMergeArrs[val].rowArr[rowIndex];\r\n      let _col = _row > 0 ? 1 : 0;\r\n      return [_row, _col];\r\n    },\r\n\r\n    //自定义界面表格合拼\r\n    arraySpanMethod2({ column, rowIndex }) {\r\n      // 把需要循环的列名加入\r\n      if (column.property === \"Target\")\r\n        return this.mergeAction2(\"Target\", rowIndex);\r\n      if (column.property === \"Index\")\r\n        return this.mergeAction2(\"Index\", rowIndex);\r\n      if (column.property === \"Factor\")\r\n        return this.mergeAction2(\"Factor\", rowIndex);\r\n    },\r\n\r\n    mergeAction2(val, rowIndex) {\r\n      let _row = this.rowCustomMergeArrs[val].rowArr[rowIndex];\r\n      let _col = _row > 0 ? 1 : 0;\r\n      return [_row, _col];\r\n    },\r\n\r\n    rowMergeHandle(arr, data) {\r\n      if (!Array.isArray(arr) && !arr.length) return false;\r\n      if (!Array.isArray(data) && !data.length) return false;\r\n      let needMerge = {};\r\n      arr.forEach((i) => {\r\n        needMerge[i] = {\r\n          rowArr: [],\r\n          rowMergeNum: 0,\r\n        };\r\n        data.forEach((item, index) => {\r\n          if (index === 0) {\r\n            needMerge[i].rowArr.push(1);\r\n            needMerge[i].rowMergeNum = 0;\r\n          } else {\r\n            if (item[i] === data[index - 1][i]) {\r\n              needMerge[i].rowArr[needMerge[i].rowMergeNum] += 1;\r\n              needMerge[i].rowArr.push(0);\r\n            } else {\r\n              needMerge[i].rowArr.push(1);\r\n              needMerge[i].rowMergeNum = index;\r\n            }\r\n          }\r\n        });\r\n      });\r\n      return needMerge;\r\n    },\r\n    //现有体系页面单元格点击事件\r\n    TableCell({ row, rowIndex }) {\r\n      row.index = rowIndex;\r\n    },\r\n    cellClick(row, column) {\r\n      switch (column.label) {\r\n        case \"目标层\":\r\n          this.tabClickIndex = row.index;\r\n          this.tabClickLabel = column.label;\r\n          break;\r\n        case \"指标层\":\r\n          this.tabClickIndex = row.index;\r\n          this.tabClickLabel = column.label;\r\n          break;\r\n        case \"因子层\":\r\n          this.tabClickIndex = row.index;\r\n          this.tabClickLabel = column.label;\r\n          break;\r\n        case \"因子\":\r\n          this.tabClickIndex = row.index;\r\n          this.tabClickLabel = column.label;\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n    },\r\n    //失去焦点初始化\r\n    inputBlur() {\r\n      this.tabClickIndex = null;\r\n      this.tabClickLabel = \"\";\r\n    },\r\n\r\n    //自定义体系页面的四个按钮\r\n    AddButtonClick() {\r\n      AddJsonData(\r\n        this.OneReturn,\r\n        this.TwoReturn,\r\n        this.ThreeReturn,\r\n        this.CustomDataTables\r\n      );\r\n      //挂载自定义体系表格合拼\r\n      this.rowCustomMergeArrs = this.rowMergeHandle(\r\n        this.needMergeArr,\r\n        this.CustomDataTables\r\n      );\r\n    },\r\n    DeleteButtonClick() {\r\n      DeleteJsonDate(this.CustomDataTables);\r\n    },\r\n    ConfirmButtonClick() {\r\n      this.WeightDataTable = JSON.parse(JSON.stringify(this.CustomDataTables));\r\n      this.rowMergeArrs = this.rowMergeHandle(\r\n        this.needMergeArr,\r\n        this.WeightDataTable\r\n      );\r\n      console.log(this.WeightDataTable);\r\n    },\r\n    CancelButtonClick() {\r\n      this.WeightDataTable = JSON.parse(JSON.stringify(this.SDGsIndex));\r\n      this.rowMergeArrs = this.rowMergeHandle(\r\n        this.needMergeArr,\r\n        this.WeightDataTable\r\n      );\r\n      console.log(this.WeightDataTable);\r\n    },\r\n\r\n    //权重设置页面单元格点击事件\r\n    WeightCellClick(row) {\r\n      //点击自定义单元格把第几列数据传入\r\n      this.WeightDataIndex = row.index;\r\n    },\r\n    //权重设置页面通过点击确定为其设置权重和数据\r\n    WeightDataClick1(scope) {\r\n      createJsonDataOfDatatset(\r\n        \"IndexWeight\",\r\n        this.WeightInput,\r\n        this.WeightDataTable,\r\n        this.WeightDataIndex\r\n      );\r\n      scope._self.$refs[`popover-${scope.$index}`].doClose();\r\n    },\r\n    WeightDataClick2(scope) {\r\n      createJsonDataOfDatatset(\r\n        \"FactorWeight\",\r\n        this.WeightInput,\r\n        this.WeightDataTable,\r\n        this.WeightDataIndex\r\n      );\r\n      scope._self.$refs[`popover-${scope.$index}`].doClose();\r\n    },\r\n    WeightDataClick3(scope) {\r\n      createJsonDataOfDatatset(\r\n        \"FactorLayerWeight\",\r\n        this.WeightInput,\r\n        this.WeightDataTable,\r\n        this.WeightDataIndex\r\n      );\r\n      createJsonDataOfDatatset(\r\n        \"FactorLayerData\",\r\n        Number(this.DataInput),\r\n        this.WeightDataTable,\r\n        this.WeightDataIndex\r\n      );\r\n      scope._self.$refs[`popover-${scope.$index}`].doClose();\r\n    },\r\n    //权重设置页面计算事件\r\n    CalculateClick() {\r\n      CalculateData(this.WeightDataTable);\r\n      this.ResultDataTable = this.WeightDataTable;\r\n      Global.ResultJson = this.ResultDataTable;\r\n      this.CalculationState = 1;\r\n      this.rowMergeArrs = this.rowMergeHandle(\r\n        this.needMergeArr,\r\n        this.WeightDataTable\r\n      );\r\n    },\r\n    //权重设置页面重置事件\r\n    ReCalculateClick() {\r\n      this.CalculationState = 0;\r\n      this.rowMergeArrs = this.rowMergeHandle(\r\n        this.needMergeArr,\r\n        this.WeightDataTable\r\n      );\r\n    },\r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      // 根据浏览器高度设置初始高度\r\n      this.tableHeight = window.innerHeight - 690;\r\n      this.tableHeight2 = window.innerHeight - 380;\r\n      // 监听浏览器高度变化，改变表格高度\r\n      window.onresize = () => {\r\n        this.tableHeight = window.innerHeight - 690;\r\n        this.tableHeight2 = window.innerHeight - 380;\r\n      };\r\n    });\r\n    this.WeightDataTable = JSON.parse(JSON.stringify(this.SDGsIndex));\r\n    this.rowMergeArrs = this.rowMergeHandle(\r\n      this.needMergeArr,\r\n      this.WeightDataTable\r\n    );\r\n    this.ListOne = SplitJson(\"维度\", \"目标\", \"领域\", \"一级指标\", \"一级目标\");\r\n    this.ListTwo = SplitJson(\r\n      \"具体目标\",\r\n      \"具体目标\",\r\n      \"指数\",\r\n      \"二级指标\",\r\n      \"二级指数\"\r\n    );\r\n    this.ListThree = SplitJson(\r\n      \"评价指标\",\r\n      \"具体指标\",\r\n      \"指标\",\r\n      \"评价因子\",\r\n      \"评价因子\"\r\n    );\r\n  },\r\n};\r\n</script>\r\n\r\n<style\r\n  scoped\r\n  src=\"../../../../assets/css/designwiz.webflow.82884a821.css\"\r\n></style>\r\n<style scoped>\r\n.SystemPageCol {\r\n  width: 45%;\r\n  height: 100%;\r\n  padding-top: 30px;\r\n  padding-left: 95px;\r\n}\r\n.subheading {\r\n  display: block;\r\n  font-size: 0.95em;\r\n  margin-top: 1.33em;\r\n  margin-bottom: 1.33em;\r\n  margin-left: 0;\r\n  margin-right: 0;\r\n  font-weight: bold;\r\n}\r\n.data-show-table {\r\n  height: 95%;\r\n  width: 95%;\r\n  margin-top: 2.5%;\r\n  margin-left: 2.5%;\r\n  margin-bottom: 2.5%;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}