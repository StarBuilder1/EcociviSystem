{"ast":null,"code":"import { point, latLng } from 'leaflet';\nimport { Task } from './Task';\nimport { warn, responseToFeatureCollection, isArcgisOnline, extentToBounds, _setGeometry } from '../Util';\nexport var Query = Task.extend({\n  setters: {\n    offset: 'resultOffset',\n    limit: 'resultRecordCount',\n    fields: 'outFields',\n    precision: 'geometryPrecision',\n    featureIds: 'objectIds',\n    returnGeometry: 'returnGeometry',\n    returnM: 'returnM',\n    transform: 'datumTransformation',\n    token: 'token'\n  },\n  path: 'query',\n  params: {\n    returnGeometry: true,\n    where: '1=1',\n    outSR: 4326,\n    outFields: '*'\n  },\n  // Returns a feature if its shape is wholly contained within the search geometry. Valid for all shape type combinations.\n  within: function (geometry) {\n    this._setGeometryParams(geometry);\n    this.params.spatialRel = 'esriSpatialRelContains'; // to the REST api this reads geometry **contains** layer\n    return this;\n  },\n  // Returns a feature if any spatial relationship is found. Applies to all shape type combinations.\n  intersects: function (geometry) {\n    this._setGeometryParams(geometry);\n    this.params.spatialRel = 'esriSpatialRelIntersects';\n    return this;\n  },\n  // Returns a feature if its shape wholly contains the search geometry. Valid for all shape type combinations.\n  contains: function (geometry) {\n    this._setGeometryParams(geometry);\n    this.params.spatialRel = 'esriSpatialRelWithin'; // to the REST api this reads geometry **within** layer\n    return this;\n  },\n  // Returns a feature if the intersection of the interiors of the two shapes is not empty and has a lower dimension than the maximum dimension of the two shapes. Two lines that share an endpoint in common do not cross. Valid for Line/Line, Line/Area, Multi-point/Area, and Multi-point/Line shape type combinations.\n  crosses: function (geometry) {\n    this._setGeometryParams(geometry);\n    this.params.spatialRel = 'esriSpatialRelCrosses';\n    return this;\n  },\n  // Returns a feature if the two shapes share a common boundary. However, the intersection of the interiors of the two shapes must be empty. In the Point/Line case, the point may touch an endpoint only of the line. Applies to all combinations except Point/Point.\n  touches: function (geometry) {\n    this._setGeometryParams(geometry);\n    this.params.spatialRel = 'esriSpatialRelTouches';\n    return this;\n  },\n  // Returns a feature if the intersection of the two shapes results in an object of the same dimension, but different from both of the shapes. Applies to Area/Area, Line/Line, and Multi-point/Multi-point shape type combinations.\n  overlaps: function (geometry) {\n    this._setGeometryParams(geometry);\n    this.params.spatialRel = 'esriSpatialRelOverlaps';\n    return this;\n  },\n  // Returns a feature if the envelope of the two shapes intersects.\n  bboxIntersects: function (geometry) {\n    this._setGeometryParams(geometry);\n    this.params.spatialRel = 'esriSpatialRelEnvelopeIntersects';\n    return this;\n  },\n  // if someone can help decipher the ArcObjects explanation and translate to plain speak, we should mention this method in the doc\n  indexIntersects: function (geometry) {\n    this._setGeometryParams(geometry);\n    this.params.spatialRel = 'esriSpatialRelIndexIntersects'; // Returns a feature if the envelope of the query geometry intersects the index entry for the target geometry\n    return this;\n  },\n  // only valid for Feature Services running on ArcGIS Server 10.3+ or ArcGIS Online\n  nearby: function (latlng, radius) {\n    latlng = latLng(latlng);\n    this.params.geometry = [latlng.lng, latlng.lat];\n    this.params.geometryType = 'esriGeometryPoint';\n    this.params.spatialRel = 'esriSpatialRelIntersects';\n    this.params.units = 'esriSRUnit_Meter';\n    this.params.distance = radius;\n    this.params.inSR = 4326;\n    return this;\n  },\n  where: function (string) {\n    // instead of converting double-quotes to single quotes, pass as is, and provide a more informative message if a 400 is encountered\n    this.params.where = string;\n    return this;\n  },\n  between: function (start, end) {\n    this.params.time = [start.valueOf(), end.valueOf()];\n    return this;\n  },\n  simplify: function (map, factor) {\n    var mapWidth = Math.abs(map.getBounds().getWest() - map.getBounds().getEast());\n    this.params.maxAllowableOffset = mapWidth / map.getSize().y * factor;\n    return this;\n  },\n  orderBy: function (fieldName, order) {\n    order = order || 'ASC';\n    this.params.orderByFields = this.params.orderByFields ? this.params.orderByFields + ',' : '';\n    this.params.orderByFields += [fieldName, order].join(' ');\n    return this;\n  },\n  run: function (callback, context) {\n    this._cleanParams();\n\n    // services hosted on ArcGIS Online and ArcGIS Server 10.3.1+ support requesting geojson directly\n    if (this.options.isModern || isArcgisOnline(this.options.url) && this.options.isModern === undefined) {\n      this.params.f = 'geojson';\n      return this.request(function (error, response) {\n        this._trapSQLerrors(error);\n        callback.call(context, error, response, response);\n      }, this);\n\n      // otherwise convert it in the callback then pass it on\n    } else {\n      return this.request(function (error, response) {\n        this._trapSQLerrors(error);\n        callback.call(context, error, response && responseToFeatureCollection(response), response);\n      }, this);\n    }\n  },\n  count: function (callback, context) {\n    this._cleanParams();\n    this.params.returnCountOnly = true;\n    return this.request(function (error, response) {\n      callback.call(this, error, response && response.count, response);\n    }, context);\n  },\n  ids: function (callback, context) {\n    this._cleanParams();\n    this.params.returnIdsOnly = true;\n    return this.request(function (error, response) {\n      callback.call(this, error, response && response.objectIds, response);\n    }, context);\n  },\n  // only valid for Feature Services running on ArcGIS Server 10.3+ or ArcGIS Online\n  bounds: function (callback, context) {\n    this._cleanParams();\n    this.params.returnExtentOnly = true;\n    return this.request(function (error, response) {\n      if (response && response.extent && extentToBounds(response.extent)) {\n        callback.call(context, error, extentToBounds(response.extent), response);\n      } else {\n        error = {\n          message: 'Invalid Bounds'\n        };\n        callback.call(context, error, null, response);\n      }\n    }, context);\n  },\n  distinct: function () {\n    // geometry must be omitted for queries requesting distinct values\n    this.params.returnGeometry = false;\n    this.params.returnDistinctValues = true;\n    return this;\n  },\n  // only valid for image services\n  pixelSize: function (rawPoint) {\n    var castPoint = point(rawPoint);\n    this.params.pixelSize = [castPoint.x, castPoint.y];\n    return this;\n  },\n  // only valid for map services\n  layer: function (layer) {\n    this.path = layer + '/query';\n    return this;\n  },\n  _trapSQLerrors: function (error) {\n    if (error) {\n      if (error.code === '400') {\n        warn('one common syntax error in query requests is encasing string values in double quotes instead of single quotes');\n      }\n    }\n  },\n  _cleanParams: function () {\n    delete this.params.returnIdsOnly;\n    delete this.params.returnExtentOnly;\n    delete this.params.returnCountOnly;\n  },\n  _setGeometryParams: function (geometry) {\n    this.params.inSR = 4326;\n    var converted = _setGeometry(geometry);\n    this.params.geometry = converted.geometry;\n    this.params.geometryType = converted.geometryType;\n  }\n});\nexport function query(options) {\n  return new Query(options);\n}\nexport default query;","map":{"version":3,"names":["point","latLng","Task","warn","responseToFeatureCollection","isArcgisOnline","extentToBounds","_setGeometry","Query","extend","setters","offset","limit","fields","precision","featureIds","returnGeometry","returnM","transform","token","path","params","where","outSR","outFields","within","geometry","_setGeometryParams","spatialRel","intersects","contains","crosses","touches","overlaps","bboxIntersects","indexIntersects","nearby","latlng","radius","lng","lat","geometryType","units","distance","inSR","string","between","start","end","time","valueOf","simplify","map","factor","mapWidth","Math","abs","getBounds","getWest","getEast","maxAllowableOffset","getSize","y","orderBy","fieldName","order","orderByFields","join","run","callback","context","_cleanParams","options","isModern","url","undefined","f","request","error","response","_trapSQLerrors","call","count","returnCountOnly","ids","returnIdsOnly","objectIds","bounds","returnExtentOnly","extent","message","distinct","returnDistinctValues","pixelSize","rawPoint","castPoint","x","layer","code","converted","query"],"sources":["E:/Working/IP_proj/EcosystemCivi/ecosys/node_modules/esri-leaflet/src/Tasks/Query.js"],"sourcesContent":["import { point, latLng } from 'leaflet';\r\nimport { Task } from './Task';\r\nimport {\r\n  warn,\r\n  responseToFeatureCollection,\r\n  isArcgisOnline,\r\n  extentToBounds,\r\n  _setGeometry\r\n} from '../Util';\r\n\r\nexport var Query = Task.extend({\r\n  setters: {\r\n    offset: 'resultOffset',\r\n    limit: 'resultRecordCount',\r\n    fields: 'outFields',\r\n    precision: 'geometryPrecision',\r\n    featureIds: 'objectIds',\r\n    returnGeometry: 'returnGeometry',\r\n    returnM: 'returnM',\r\n    transform: 'datumTransformation',\r\n    token: 'token'\r\n  },\r\n\r\n  path: 'query',\r\n\r\n  params: {\r\n    returnGeometry: true,\r\n    where: '1=1',\r\n    outSR: 4326,\r\n    outFields: '*'\r\n  },\r\n\r\n  // Returns a feature if its shape is wholly contained within the search geometry. Valid for all shape type combinations.\r\n  within: function (geometry) {\r\n    this._setGeometryParams(geometry);\r\n    this.params.spatialRel = 'esriSpatialRelContains'; // to the REST api this reads geometry **contains** layer\r\n    return this;\r\n  },\r\n\r\n  // Returns a feature if any spatial relationship is found. Applies to all shape type combinations.\r\n  intersects: function (geometry) {\r\n    this._setGeometryParams(geometry);\r\n    this.params.spatialRel = 'esriSpatialRelIntersects';\r\n    return this;\r\n  },\r\n\r\n  // Returns a feature if its shape wholly contains the search geometry. Valid for all shape type combinations.\r\n  contains: function (geometry) {\r\n    this._setGeometryParams(geometry);\r\n    this.params.spatialRel = 'esriSpatialRelWithin'; // to the REST api this reads geometry **within** layer\r\n    return this;\r\n  },\r\n\r\n  // Returns a feature if the intersection of the interiors of the two shapes is not empty and has a lower dimension than the maximum dimension of the two shapes. Two lines that share an endpoint in common do not cross. Valid for Line/Line, Line/Area, Multi-point/Area, and Multi-point/Line shape type combinations.\r\n  crosses: function (geometry) {\r\n    this._setGeometryParams(geometry);\r\n    this.params.spatialRel = 'esriSpatialRelCrosses';\r\n    return this;\r\n  },\r\n\r\n  // Returns a feature if the two shapes share a common boundary. However, the intersection of the interiors of the two shapes must be empty. In the Point/Line case, the point may touch an endpoint only of the line. Applies to all combinations except Point/Point.\r\n  touches: function (geometry) {\r\n    this._setGeometryParams(geometry);\r\n    this.params.spatialRel = 'esriSpatialRelTouches';\r\n    return this;\r\n  },\r\n\r\n  // Returns a feature if the intersection of the two shapes results in an object of the same dimension, but different from both of the shapes. Applies to Area/Area, Line/Line, and Multi-point/Multi-point shape type combinations.\r\n  overlaps: function (geometry) {\r\n    this._setGeometryParams(geometry);\r\n    this.params.spatialRel = 'esriSpatialRelOverlaps';\r\n    return this;\r\n  },\r\n\r\n  // Returns a feature if the envelope of the two shapes intersects.\r\n  bboxIntersects: function (geometry) {\r\n    this._setGeometryParams(geometry);\r\n    this.params.spatialRel = 'esriSpatialRelEnvelopeIntersects';\r\n    return this;\r\n  },\r\n\r\n  // if someone can help decipher the ArcObjects explanation and translate to plain speak, we should mention this method in the doc\r\n  indexIntersects: function (geometry) {\r\n    this._setGeometryParams(geometry);\r\n    this.params.spatialRel = 'esriSpatialRelIndexIntersects'; // Returns a feature if the envelope of the query geometry intersects the index entry for the target geometry\r\n    return this;\r\n  },\r\n\r\n  // only valid for Feature Services running on ArcGIS Server 10.3+ or ArcGIS Online\r\n  nearby: function (latlng, radius) {\r\n    latlng = latLng(latlng);\r\n    this.params.geometry = [latlng.lng, latlng.lat];\r\n    this.params.geometryType = 'esriGeometryPoint';\r\n    this.params.spatialRel = 'esriSpatialRelIntersects';\r\n    this.params.units = 'esriSRUnit_Meter';\r\n    this.params.distance = radius;\r\n    this.params.inSR = 4326;\r\n    return this;\r\n  },\r\n\r\n  where: function (string) {\r\n    // instead of converting double-quotes to single quotes, pass as is, and provide a more informative message if a 400 is encountered\r\n    this.params.where = string;\r\n    return this;\r\n  },\r\n\r\n  between: function (start, end) {\r\n    this.params.time = [start.valueOf(), end.valueOf()];\r\n    return this;\r\n  },\r\n\r\n  simplify: function (map, factor) {\r\n    var mapWidth = Math.abs(map.getBounds().getWest() - map.getBounds().getEast());\r\n    this.params.maxAllowableOffset = (mapWidth / map.getSize().y) * factor;\r\n    return this;\r\n  },\r\n\r\n  orderBy: function (fieldName, order) {\r\n    order = order || 'ASC';\r\n    this.params.orderByFields = (this.params.orderByFields) ? this.params.orderByFields + ',' : '';\r\n    this.params.orderByFields += ([fieldName, order]).join(' ');\r\n    return this;\r\n  },\r\n\r\n  run: function (callback, context) {\r\n    this._cleanParams();\r\n\r\n    // services hosted on ArcGIS Online and ArcGIS Server 10.3.1+ support requesting geojson directly\r\n    if (this.options.isModern || (isArcgisOnline(this.options.url) && this.options.isModern === undefined)) {\r\n      this.params.f = 'geojson';\r\n\r\n      return this.request(function (error, response) {\r\n        this._trapSQLerrors(error);\r\n        callback.call(context, error, response, response);\r\n      }, this);\r\n\r\n      // otherwise convert it in the callback then pass it on\r\n    } else {\r\n      return this.request(function (error, response) {\r\n        this._trapSQLerrors(error);\r\n        callback.call(context, error, (response && responseToFeatureCollection(response)), response);\r\n      }, this);\r\n    }\r\n  },\r\n\r\n  count: function (callback, context) {\r\n    this._cleanParams();\r\n    this.params.returnCountOnly = true;\r\n    return this.request(function (error, response) {\r\n      callback.call(this, error, (response && response.count), response);\r\n    }, context);\r\n  },\r\n\r\n  ids: function (callback, context) {\r\n    this._cleanParams();\r\n    this.params.returnIdsOnly = true;\r\n    return this.request(function (error, response) {\r\n      callback.call(this, error, (response && response.objectIds), response);\r\n    }, context);\r\n  },\r\n\r\n  // only valid for Feature Services running on ArcGIS Server 10.3+ or ArcGIS Online\r\n  bounds: function (callback, context) {\r\n    this._cleanParams();\r\n    this.params.returnExtentOnly = true;\r\n    return this.request(function (error, response) {\r\n      if (response && response.extent && extentToBounds(response.extent)) {\r\n        callback.call(context, error, extentToBounds(response.extent), response);\r\n      } else {\r\n        error = {\r\n          message: 'Invalid Bounds'\r\n        };\r\n        callback.call(context, error, null, response);\r\n      }\r\n    }, context);\r\n  },\r\n\r\n  distinct: function () {\r\n    // geometry must be omitted for queries requesting distinct values\r\n    this.params.returnGeometry = false;\r\n    this.params.returnDistinctValues = true;\r\n    return this;\r\n  },\r\n\r\n  // only valid for image services\r\n  pixelSize: function (rawPoint) {\r\n    var castPoint = point(rawPoint);\r\n    this.params.pixelSize = [castPoint.x, castPoint.y];\r\n    return this;\r\n  },\r\n\r\n  // only valid for map services\r\n  layer: function (layer) {\r\n    this.path = layer + '/query';\r\n    return this;\r\n  },\r\n\r\n  _trapSQLerrors: function (error) {\r\n    if (error) {\r\n      if (error.code === '400') {\r\n        warn('one common syntax error in query requests is encasing string values in double quotes instead of single quotes');\r\n      }\r\n    }\r\n  },\r\n\r\n  _cleanParams: function () {\r\n    delete this.params.returnIdsOnly;\r\n    delete this.params.returnExtentOnly;\r\n    delete this.params.returnCountOnly;\r\n  },\r\n\r\n  _setGeometryParams: function (geometry) {\r\n    this.params.inSR = 4326;\r\n    var converted = _setGeometry(geometry);\r\n    this.params.geometry = converted.geometry;\r\n    this.params.geometryType = converted.geometryType;\r\n  }\r\n\r\n});\r\n\r\nexport function query (options) {\r\n  return new Query(options);\r\n}\r\n\r\nexport default query;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}