{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n//为一条数据添加属性键和属性值\nexport const createJsonData = (prop, val, OneJsonData) => {\n  if (typeof val == \"undefined\") {\n    delete OneJsonData[prop];\n  } else {\n    OneJsonData[prop] = val;\n  }\n};\n\n//为json对象数组添加数据\nexport const AddJsonData = (SecondTarget, ThirdTarget, Dataset) => {\n  var OneJsonData = {\n    Target: \"Environmental Index\"\n  };\n  createJsonData(\"Factor\", SecondTarget, OneJsonData);\n  createJsonData(\"FactorLayer\", ThirdTarget, OneJsonData);\n  Dataset.push(OneJsonData);\n  console.log(Dataset);\n};\n\n//为数据集删除最后一列数据\nexport const DeleteJsonDate = Dataset => {\n  Dataset.splice(Dataset.length - 1, 1);\n};\n\n//为Json数据集的其中一条数据添加属性键和属性值\nexport const createJsonDataOfDatatset = (prop, val, Dataset, index) => {\n  createJsonData(prop, val, Dataset[index]);\n};\n\n//计算每个权重和数据指标值\nexport const CalculateData = Dataset => {\n  //第一遍循环先计算因子层的数据\n  var TempIndex = 0;\n  var DataSum = Number(Dataset[0].FactorLayerData) * Number(Dataset[0].FactorLayerWeight);\n  var WeightSum = Number(Dataset[0].FactorLayerWeight);\n  var Result;\n  for (var i = 0; i < Dataset.length; i++) {\n    if (Object.prototype.hasOwnProperty.call(Dataset[i], \"FactorWeight\")) {\n      if (i != 0) {\n        Result = DataSum / WeightSum;\n        createJsonDataOfDatatset(\"FactorData\", Result, Dataset, TempIndex);\n        DataSum = Number(Dataset[i].FactorLayerData) * Number(Dataset[i].FactorLayerWeight);\n        WeightSum = Number(Dataset[i].FactorLayerWeight);\n      }\n      TempIndex = i;\n    } else {\n      DataSum = DataSum + Number(Dataset[i].FactorLayerData) * Number(Dataset[i].FactorLayerWeight);\n      WeightSum = Number(WeightSum) + Number(Dataset[i].FactorLayerWeight);\n    }\n  }\n  Result = DataSum / WeightSum;\n  createJsonDataOfDatatset(\"FactorData\", Result, Dataset, TempIndex);\n  //循环目标层数据\n  TempIndex = 0;\n  DataSum = 0;\n  WeightSum = 0;\n  for (i = 0; i < Dataset.length; i++) {\n    if (Object.prototype.hasOwnProperty.call(Dataset[i], \"FactorData\")) {\n      DataSum = DataSum + Number(Dataset[i].FactorData) * Number(Dataset[i].FactorWeight);\n      WeightSum = WeightSum + Number(Dataset[i].FactorWeight);\n    }\n  }\n  Result = DataSum / WeightSum;\n  createJsonDataOfDatatset(\"TargetData\", Result, Dataset, TempIndex);\n};\n\n//最后结果的展示\nexport const ShowResult = (Dataset, ListColumn1, ListColumn2) => {\n  let ResultList = JSON.stringify(Dataset, [ListColumn1, ListColumn2]);\n  ResultList = JSON.parse(ResultList);\n  return ResultList;\n};\n\n//计算空间自相关指数\n//首先是判断两个区域是否相邻\n// export const judgeNearby = (Dataset, i, j) => {\n//   let state = 0;\n//   for (let n = 0; n < Dataset[i].geometry.coordinates[0].length; n++) {\n//     for (let m = 0; m < Dataset[j].geometry.coordinates[0].length; m++) {\n//       if (\n//         Dataset[i].geometry.coordinates[0][n].toString() ==\n//         Dataset[j].geometry.coordinates[0][m].toString()\n//       ) {\n//         state = 1;\n//         break;\n//       }\n//     }\n//   }\n//   console.log(state);\n//   return state;\n// };\n\nexport const ReturnAttribute = (feature, indexName) => {\n  let Data = 0;\n  for (let i = 0; i < feature.properties.Table.length; i++) {\n    if (feature.properties.Table[i].Name == indexName) {\n      Data = feature.properties.Table[i].NameData;\n    }\n  }\n  return Data;\n};\n\n//计算所选择指标的区域均值\nexport const globalAverage = (Dataset, IndexName) => {\n  let AverageData = 0;\n  for (let i = 0; i < Dataset.length; i++) {\n    AverageData = AverageData + ReturnAttribute(Dataset[i], IndexName);\n  }\n  AverageData = AverageData / Dataset.length;\n  return AverageData;\n};","map":{"version":3,"names":["createJsonData","prop","val","OneJsonData","AddJsonData","SecondTarget","ThirdTarget","Dataset","Target","push","console","log","DeleteJsonDate","splice","length","createJsonDataOfDatatset","index","CalculateData","TempIndex","DataSum","Number","FactorLayerData","FactorLayerWeight","WeightSum","Result","i","Object","prototype","hasOwnProperty","call","FactorData","FactorWeight","ShowResult","ListColumn1","ListColumn2","ResultList","JSON","stringify","parse","ReturnAttribute","feature","indexName","Data","properties","Table","Name","NameData","globalAverage","IndexName","AverageData"],"sources":["E:/Working/IP_proj/EcociviSystem/ecosys/src/views/EvaluateAnalyze/js/optionData.js"],"sourcesContent":["//为一条数据添加属性键和属性值\r\nexport const createJsonData = (prop, val, OneJsonData) => {\r\n  if (typeof val == \"undefined\") {\r\n    delete OneJsonData[prop];\r\n  } else {\r\n    OneJsonData[prop] = val;\r\n  }\r\n};\r\n\r\n//为json对象数组添加数据\r\nexport const AddJsonData = (SecondTarget, ThirdTarget, Dataset) => {\r\n  var OneJsonData = { Target: \"Environmental Index\" };\r\n  createJsonData(\"Factor\", SecondTarget, OneJsonData);\r\n  createJsonData(\"FactorLayer\", ThirdTarget, OneJsonData);\r\n  Dataset.push(OneJsonData);\r\n  console.log(Dataset);\r\n};\r\n\r\n//为数据集删除最后一列数据\r\nexport const DeleteJsonDate = (Dataset) => {\r\n  Dataset.splice(Dataset.length - 1, 1);\r\n};\r\n\r\n//为Json数据集的其中一条数据添加属性键和属性值\r\nexport const createJsonDataOfDatatset = (prop, val, Dataset, index) => {\r\n  createJsonData(prop, val, Dataset[index]);\r\n};\r\n\r\n//计算每个权重和数据指标值\r\nexport const CalculateData = (Dataset) => {\r\n  //第一遍循环先计算因子层的数据\r\n  var TempIndex = 0;\r\n  var DataSum =\r\n    Number(Dataset[0].FactorLayerData) * Number(Dataset[0].FactorLayerWeight);\r\n  var WeightSum = Number(Dataset[0].FactorLayerWeight);\r\n  var Result;\r\n  for (var i = 0; i < Dataset.length; i++) {\r\n    if (Object.prototype.hasOwnProperty.call(Dataset[i], \"FactorWeight\")) {\r\n      if (i != 0) {\r\n        Result = DataSum / WeightSum;\r\n        createJsonDataOfDatatset(\"FactorData\", Result, Dataset, TempIndex);\r\n        DataSum =\r\n          Number(Dataset[i].FactorLayerData) *\r\n          Number(Dataset[i].FactorLayerWeight);\r\n        WeightSum = Number(Dataset[i].FactorLayerWeight);\r\n      }\r\n      TempIndex = i;\r\n    } else {\r\n      DataSum =\r\n        DataSum +\r\n        Number(Dataset[i].FactorLayerData) *\r\n          Number(Dataset[i].FactorLayerWeight);\r\n      WeightSum = Number(WeightSum) + Number(Dataset[i].FactorLayerWeight);\r\n    }\r\n  }\r\n  Result = DataSum / WeightSum;\r\n  createJsonDataOfDatatset(\"FactorData\", Result, Dataset, TempIndex);\r\n  //循环目标层数据\r\n  TempIndex = 0;\r\n  DataSum = 0;\r\n  WeightSum = 0;\r\n  for (i = 0; i < Dataset.length; i++) {\r\n    if (Object.prototype.hasOwnProperty.call(Dataset[i], \"FactorData\")) {\r\n      DataSum =\r\n        DataSum +\r\n        Number(Dataset[i].FactorData) * Number(Dataset[i].FactorWeight);\r\n      WeightSum = WeightSum + Number(Dataset[i].FactorWeight);\r\n    }\r\n  }\r\n  Result = DataSum / WeightSum;\r\n  createJsonDataOfDatatset(\"TargetData\", Result, Dataset, TempIndex);\r\n};\r\n\r\n//最后结果的展示\r\nexport const ShowResult = (Dataset, ListColumn1, ListColumn2) => {\r\n  let ResultList = JSON.stringify(Dataset, [ListColumn1, ListColumn2]);\r\n  ResultList = JSON.parse(ResultList);\r\n  return ResultList;\r\n};\r\n\r\n//计算空间自相关指数\r\n//首先是判断两个区域是否相邻\r\n// export const judgeNearby = (Dataset, i, j) => {\r\n//   let state = 0;\r\n//   for (let n = 0; n < Dataset[i].geometry.coordinates[0].length; n++) {\r\n//     for (let m = 0; m < Dataset[j].geometry.coordinates[0].length; m++) {\r\n//       if (\r\n//         Dataset[i].geometry.coordinates[0][n].toString() ==\r\n//         Dataset[j].geometry.coordinates[0][m].toString()\r\n//       ) {\r\n//         state = 1;\r\n//         break;\r\n//       }\r\n//     }\r\n//   }\r\n//   console.log(state);\r\n//   return state;\r\n// };\r\n\r\nexport const ReturnAttribute = (feature, indexName) => {\r\n  let Data = 0;\r\n  for (let i = 0; i < feature.properties.Table.length; i++) {\r\n    if (feature.properties.Table[i].Name == indexName) {\r\n      Data = feature.properties.Table[i].NameData;\r\n    }\r\n  }\r\n  return Data;\r\n};\r\n\r\n//计算所选择指标的区域均值\r\nexport const globalAverage = (Dataset, IndexName) => {\r\n  let AverageData = 0;\r\n  for (let i = 0; i < Dataset.length; i++) {\r\n    AverageData = AverageData + ReturnAttribute(Dataset[i], IndexName);\r\n  }\r\n  AverageData = AverageData / Dataset.length;\r\n  return AverageData;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}