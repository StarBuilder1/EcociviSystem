{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport AnalyzePageTableData from \"../../../../public/JsonAnalyze/AnalyzePageTableData.json\";\nimport AustriaData from \"../../../../public/JsonAnalyze/AustriaData.json\";\nimport CountryData from \"../../../../public/JsonAnalyze/CountryData\";\nimport Global from \"../views/Globel/Global\";\nimport { createJsonData } from \"./optionData\";\n\n//得到四个体系的数据\nexport const GetTableData = List => {\n  switch (List) {\n    case \"ListA\":\n      return AnalyzePageTableData.ListA;\n    case \"ListB\":\n      return AnalyzePageTableData.ListB;\n    case \"ListC\":\n      return AnalyzePageTableData.ListC;\n    case \"ListD\":\n      return AnalyzePageTableData.ListD;\n    default:\n      return null;\n  }\n};\n\n//通过json数组属性名分割字符串,合拼一级指标类别 并去除重复列\n//参数列表:List1Column表示四个列表对应的列\n//参数列表：TargetColumn表示合并修改统一的列名\nexport const SplitJson = (List1Column, List2Column, List3Column, List4Column, TargetColumn) => {\n  //先提取单列\n  let List1 = JSON.stringify(AnalyzePageTableData.ListA, [List1Column]);\n  //统一命名为一级目标\n  List1 = List1.replace(new RegExp(List1Column, \"g\"), TargetColumn);\n  //转回Json\n  List1 = JSON.parse(List1);\n  //合并\n  let List2 = JSON.stringify(AnalyzePageTableData.ListB, [List2Column]);\n  List2 = List2.replace(new RegExp(List2Column, \"g\"), TargetColumn);\n  List2 = JSON.parse(List2);\n  let List12 = List1.concat(List2);\n  let List3 = JSON.stringify(AnalyzePageTableData.ListC, [List3Column]);\n  List3 = List3.replace(new RegExp(List3Column, \"g\"), TargetColumn);\n  List3 = JSON.parse(List3);\n  let List13 = List12.concat(List3);\n  let List4 = JSON.stringify(AnalyzePageTableData.ListD, [List4Column]);\n  List4 = List4.replace(new RegExp(List4Column, \"g\"), TargetColumn);\n  List4 = JSON.parse(List4);\n  let List14 = List13.concat(List4);\n  //去除重复列\n  var temp = {}; //存放id\n  var result = []; //新数组\n  List14.map(item => {\n    if (!temp[item[TargetColumn]]) {\n      result.push(item);\n      temp[item[TargetColumn]] = true;\n    }\n  });\n  console.log(result);\n  return result;\n};\n\n//判断AustriaData和CountryData中的哪些数据集被选中了,同时添加生态文明表格的属性值\nexport const JudgeSelectJson = (JsonName, AttributeJson) => {\n  let AustriaJson = AustriaData.austria.features;\n  for (let i = 0; i < AustriaJson.length; i++) {\n    let status = true;\n    if (JsonName == AustriaJson[i].properties.name) {\n      createJsonData(\"Table\", AttributeJson, AustriaJson[i].properties);\n      //去除重复列\n      if (Global.VisualJson.length == 0) {\n        Global.VisualJson.push(AustriaJson[i]);\n      } else {\n        for (let j = 0; j < Global.VisualJson.length; j++) {\n          if (JsonName == Global.VisualJson[j].properties.name) {\n            status = false;\n            break;\n          }\n        }\n        if (status) {\n          Global.VisualJson.push(AustriaJson[i]);\n        }\n      }\n    }\n  }\n  let CountryJson = CountryData.world.features;\n  for (let i = 0; i < CountryJson.length; i++) {\n    if (JsonName == CountryJson[i].properties.name) {\n      //要判断一下是否在Global中存在\n      let status = true;\n      createJsonData(\"Table\", AttributeJson, CountryJson[i].properties);\n      Global.VisualJson.push(CountryJson[i]);\n      if (Global.VisualJson.length == 0) {\n        Global.VisualJson.push(CountryData[i]);\n      } else {\n        for (let j = 0; j < Global.VisualJson.length; j++) {\n          if (JsonName == Global.VisualJson[j].properties.name) {\n            status = false;\n            break;\n          }\n        }\n        if (status) {\n          Global.VisualJson.push(CountryData[i]);\n        }\n      }\n    }\n  }\n  // console.log(Global.VisualJson);\n};\n\n//得到有值的Result数据\nexport const GetResultJson = () => {\n  let List1 = JSON.stringify(Global.ResultJson, [\"Target\", \"TargetData\"]);\n  List1 = List1.replace(new RegExp(\"Target\", \"g\"), \"Name\");\n  List1 = List1.replace(new RegExp(\"TargetData\", \"g\"), \"Data\");\n  List1 = JSON.parse(List1);\n  let List2 = JSON.stringify(Global.ResultJson, [\"Factor\", \"FactorData\"]);\n  List2 = List2.replace(new RegExp(\"Factor\", \"g\"), \"Name\");\n  List2 = List2.replace(new RegExp(\"FactorData\", \"g\"), \"Data\");\n  List2 = JSON.parse(List2);\n  let List12 = List1.concat(List2);\n  let List3 = JSON.stringify(Global.ResultJson, [\"FactorLayer\", \"FactorLayerData\"]);\n  List3 = List3.replace(new RegExp(\"FactorLayer\", \"g\"), \"Name\");\n  List3 = List3.replace(new RegExp(\"FactorLayerData\", \"g\"), \"Data\");\n  List3 = JSON.parse(List3);\n  let List13 = List12.concat(List3);\n  //去除重复列\n  var temp = {}; //存放id\n  var result = []; //新数组\n  List13.map(item => {\n    if (!temp[item[\"Name\"]]) {\n      result.push(item);\n      temp[item[\"Name\"]] = true;\n    }\n  });\n  console.log(result);\n  return result;\n};","map":{"version":3,"names":["AnalyzePageTableData","AustriaData","CountryData","Global","createJsonData","GetTableData","List","ListA","ListB","ListC","ListD","SplitJson","List1Column","List2Column","List3Column","List4Column","TargetColumn","List1","JSON","stringify","replace","RegExp","parse","List2","List12","concat","List3","List13","List4","List14","temp","result","map","item","push","console","log","JudgeSelectJson","JsonName","AttributeJson","AustriaJson","austria","features","i","length","status","properties","name","VisualJson","j","CountryJson","world","GetResultJson","ResultJson"],"sources":["E:/Working/IP_proj/EcociviSystem/ecosys/src/views/EvaluateAnalyze/js/getData.js"],"sourcesContent":["import AnalyzePageTableData from \"../../../../public/JsonAnalyze/AnalyzePageTableData.json\";\r\nimport AustriaData from \"../../../../public/JsonAnalyze/AustriaData.json\";\r\nimport CountryData from \"../../../../public/JsonAnalyze/CountryData\";\r\nimport Global from \"../views/Globel/Global\";\r\nimport { createJsonData } from \"./optionData\";\r\n\r\n//得到四个体系的数据\r\nexport const GetTableData = (List) => {\r\n  switch (List) {\r\n    case \"ListA\":\r\n      return AnalyzePageTableData.ListA;\r\n    case \"ListB\":\r\n      return AnalyzePageTableData.ListB;\r\n    case \"ListC\":\r\n      return AnalyzePageTableData.ListC;\r\n    case \"ListD\":\r\n      return AnalyzePageTableData.ListD;\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\n//通过json数组属性名分割字符串,合拼一级指标类别 并去除重复列\r\n//参数列表:List1Column表示四个列表对应的列\r\n//参数列表：TargetColumn表示合并修改统一的列名\r\nexport const SplitJson = (\r\n  List1Column,\r\n  List2Column,\r\n  List3Column,\r\n  List4Column,\r\n  TargetColumn\r\n) => {\r\n  //先提取单列\r\n  let List1 = JSON.stringify(AnalyzePageTableData.ListA, [List1Column]);\r\n  //统一命名为一级目标\r\n  List1 = List1.replace(new RegExp(List1Column, \"g\"), TargetColumn);\r\n  //转回Json\r\n  List1 = JSON.parse(List1);\r\n  //合并\r\n  let List2 = JSON.stringify(AnalyzePageTableData.ListB, [List2Column]);\r\n  List2 = List2.replace(new RegExp(List2Column, \"g\"), TargetColumn);\r\n  List2 = JSON.parse(List2);\r\n  let List12 = List1.concat(List2);\r\n  let List3 = JSON.stringify(AnalyzePageTableData.ListC, [List3Column]);\r\n  List3 = List3.replace(new RegExp(List3Column, \"g\"), TargetColumn);\r\n  List3 = JSON.parse(List3);\r\n  let List13 = List12.concat(List3);\r\n  let List4 = JSON.stringify(AnalyzePageTableData.ListD, [List4Column]);\r\n  List4 = List4.replace(new RegExp(List4Column, \"g\"), TargetColumn);\r\n  List4 = JSON.parse(List4);\r\n  let List14 = List13.concat(List4);\r\n  //去除重复列\r\n  var temp = {}; //存放id\r\n  var result = []; //新数组\r\n  List14.map((item) => {\r\n    if (!temp[item[TargetColumn]]) {\r\n      result.push(item);\r\n      temp[item[TargetColumn]] = true;\r\n    }\r\n  });\r\n  console.log(result);\r\n  return result;\r\n};\r\n\r\n//判断AustriaData和CountryData中的哪些数据集被选中了,同时添加生态文明表格的属性值\r\nexport const JudgeSelectJson = (JsonName, AttributeJson) => {\r\n  let AustriaJson = AustriaData.austria.features;\r\n  for (let i = 0; i < AustriaJson.length; i++) {\r\n    let status = true;\r\n    if (JsonName == AustriaJson[i].properties.name) {\r\n      createJsonData(\"Table\", AttributeJson, AustriaJson[i].properties);\r\n      //去除重复列\r\n      if (Global.VisualJson.length == 0) {\r\n        Global.VisualJson.push(AustriaJson[i]);\r\n      } else {\r\n        for (let j = 0; j < Global.VisualJson.length; j++) {\r\n          if (JsonName == Global.VisualJson[j].properties.name) {\r\n            status = false;\r\n            break;\r\n          }\r\n        }\r\n        if (status) {\r\n          Global.VisualJson.push(AustriaJson[i]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  let CountryJson = CountryData.world.features;\r\n  for (let i = 0; i < CountryJson.length; i++) {\r\n    if (JsonName == CountryJson[i].properties.name) {\r\n      //要判断一下是否在Global中存在\r\n      let status = true;\r\n      createJsonData(\"Table\", AttributeJson, CountryJson[i].properties);\r\n      Global.VisualJson.push(CountryJson[i]);\r\n      if (Global.VisualJson.length == 0) {\r\n        Global.VisualJson.push(CountryData[i]);\r\n      } else {\r\n        for (let j = 0; j < Global.VisualJson.length; j++) {\r\n          if (JsonName == Global.VisualJson[j].properties.name) {\r\n            status = false;\r\n            break;\r\n          }\r\n        }\r\n        if (status) {\r\n          Global.VisualJson.push(CountryData[i]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // console.log(Global.VisualJson);\r\n};\r\n\r\n//得到有值的Result数据\r\nexport const GetResultJson = () => {\r\n  let List1 = JSON.stringify(Global.ResultJson, [\"Target\", \"TargetData\"]);\r\n  List1 = List1.replace(new RegExp(\"Target\", \"g\"), \"Name\");\r\n  List1 = List1.replace(new RegExp(\"TargetData\", \"g\"), \"Data\");\r\n  List1 = JSON.parse(List1);\r\n  let List2 = JSON.stringify(Global.ResultJson, [\"Factor\", \"FactorData\"]);\r\n  List2 = List2.replace(new RegExp(\"Factor\", \"g\"), \"Name\");\r\n  List2 = List2.replace(new RegExp(\"FactorData\", \"g\"), \"Data\");\r\n  List2 = JSON.parse(List2);\r\n  let List12 = List1.concat(List2);\r\n  let List3 = JSON.stringify(Global.ResultJson, [\r\n    \"FactorLayer\",\r\n    \"FactorLayerData\",\r\n  ]);\r\n  List3 = List3.replace(new RegExp(\"FactorLayer\", \"g\"), \"Name\");\r\n  List3 = List3.replace(new RegExp(\"FactorLayerData\", \"g\"), \"Data\");\r\n  List3 = JSON.parse(List3);\r\n  let List13 = List12.concat(List3);\r\n  //去除重复列\r\n  var temp = {}; //存放id\r\n  var result = []; //新数组\r\n  List13.map((item) => {\r\n    if (!temp[item[\"Name\"]]) {\r\n      result.push(item);\r\n      temp[item[\"Name\"]] = true;\r\n    }\r\n  });\r\n  console.log(result);\r\n  return result;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}